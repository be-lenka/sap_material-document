<?php
/**
 * APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Material Documents - Read, Create
 *
 * This service enables you to retrieve and create material documents, for example, to post a goods receipt for a purchase order or to document the transfer of materials between two storage locations. Additionally, the service allows you to cancel existing material documents or single items. It can be consumed by external systems and user interfaces.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\MaterialDocument\Model;

use \ArrayAccess;
use \BeLenka\SAP\MaterialDocument\ObjectSerializer;

/**
 * APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_MATERIAL_DOCUMENT_SRV.A_MaterialDocumentHeaderType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'material_document_year' => 'string',
        'material_document' => 'string',
        'inventory_transaction_type' => 'string',
        'document_date' => 'string',
        'posting_date' => 'string',
        'creation_date' => 'string',
        'creation_time' => 'string',
        'created_by_user' => 'string',
        'material_document_header_text' => 'string',
        'reference_document' => 'string',
        'version_for_printing_slip' => 'string',
        'manual_print_is_triggered' => 'string',
        'ctrl_postg_for_ext_whse_mgmt_syst' => 'string',
        'goods_movement_code' => 'string',
        'to_material_document_item' => '\BeLenka\SAP\MaterialDocument\Model\APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderTypeToMaterialDocumentItem'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'material_document_year' => null,
        'material_document' => null,
        'inventory_transaction_type' => null,
        'document_date' => null,
        'posting_date' => null,
        'creation_date' => null,
        'creation_time' => null,
        'created_by_user' => null,
        'material_document_header_text' => null,
        'reference_document' => null,
        'version_for_printing_slip' => null,
        'manual_print_is_triggered' => null,
        'ctrl_postg_for_ext_whse_mgmt_syst' => null,
        'goods_movement_code' => null,
        'to_material_document_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'material_document_year' => false,
		'material_document' => false,
		'inventory_transaction_type' => true,
		'document_date' => true,
		'posting_date' => true,
		'creation_date' => true,
		'creation_time' => true,
		'created_by_user' => true,
		'material_document_header_text' => true,
		'reference_document' => true,
		'version_for_printing_slip' => true,
		'manual_print_is_triggered' => true,
		'ctrl_postg_for_ext_whse_mgmt_syst' => true,
		'goods_movement_code' => true,
		'to_material_document_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material_document_year' => 'MaterialDocumentYear',
        'material_document' => 'MaterialDocument',
        'inventory_transaction_type' => 'InventoryTransactionType',
        'document_date' => 'DocumentDate',
        'posting_date' => 'PostingDate',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'created_by_user' => 'CreatedByUser',
        'material_document_header_text' => 'MaterialDocumentHeaderText',
        'reference_document' => 'ReferenceDocument',
        'version_for_printing_slip' => 'VersionForPrintingSlip',
        'manual_print_is_triggered' => 'ManualPrintIsTriggered',
        'ctrl_postg_for_ext_whse_mgmt_syst' => 'CtrlPostgForExtWhseMgmtSyst',
        'goods_movement_code' => 'GoodsMovementCode',
        'to_material_document_item' => 'to_MaterialDocumentItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material_document_year' => 'setMaterialDocumentYear',
        'material_document' => 'setMaterialDocument',
        'inventory_transaction_type' => 'setInventoryTransactionType',
        'document_date' => 'setDocumentDate',
        'posting_date' => 'setPostingDate',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'created_by_user' => 'setCreatedByUser',
        'material_document_header_text' => 'setMaterialDocumentHeaderText',
        'reference_document' => 'setReferenceDocument',
        'version_for_printing_slip' => 'setVersionForPrintingSlip',
        'manual_print_is_triggered' => 'setManualPrintIsTriggered',
        'ctrl_postg_for_ext_whse_mgmt_syst' => 'setCtrlPostgForExtWhseMgmtSyst',
        'goods_movement_code' => 'setGoodsMovementCode',
        'to_material_document_item' => 'setToMaterialDocumentItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material_document_year' => 'getMaterialDocumentYear',
        'material_document' => 'getMaterialDocument',
        'inventory_transaction_type' => 'getInventoryTransactionType',
        'document_date' => 'getDocumentDate',
        'posting_date' => 'getPostingDate',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'created_by_user' => 'getCreatedByUser',
        'material_document_header_text' => 'getMaterialDocumentHeaderText',
        'reference_document' => 'getReferenceDocument',
        'version_for_printing_slip' => 'getVersionForPrintingSlip',
        'manual_print_is_triggered' => 'getManualPrintIsTriggered',
        'ctrl_postg_for_ext_whse_mgmt_syst' => 'getCtrlPostgForExtWhseMgmtSyst',
        'goods_movement_code' => 'getGoodsMovementCode',
        'to_material_document_item' => 'getToMaterialDocumentItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('material_document_year', $data ?? [], null);
        $this->setIfExists('material_document', $data ?? [], null);
        $this->setIfExists('inventory_transaction_type', $data ?? [], null);
        $this->setIfExists('document_date', $data ?? [], null);
        $this->setIfExists('posting_date', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('material_document_header_text', $data ?? [], null);
        $this->setIfExists('reference_document', $data ?? [], null);
        $this->setIfExists('version_for_printing_slip', $data ?? [], null);
        $this->setIfExists('manual_print_is_triggered', $data ?? [], null);
        $this->setIfExists('ctrl_postg_for_ext_whse_mgmt_syst', $data ?? [], null);
        $this->setIfExists('goods_movement_code', $data ?? [], null);
        $this->setIfExists('to_material_document_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['material_document_year']) && (mb_strlen($this->container['material_document_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'material_document_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material_document']) && (mb_strlen($this->container['material_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'material_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['inventory_transaction_type']) && (mb_strlen($this->container['inventory_transaction_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'inventory_transaction_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['material_document_header_text']) && (mb_strlen($this->container['material_document_header_text']) > 25)) {
            $invalidProperties[] = "invalid value for 'material_document_header_text', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['reference_document']) && (mb_strlen($this->container['reference_document']) > 16)) {
            $invalidProperties[] = "invalid value for 'reference_document', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['version_for_printing_slip']) && (mb_strlen($this->container['version_for_printing_slip']) > 1)) {
            $invalidProperties[] = "invalid value for 'version_for_printing_slip', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['manual_print_is_triggered']) && (mb_strlen($this->container['manual_print_is_triggered']) > 1)) {
            $invalidProperties[] = "invalid value for 'manual_print_is_triggered', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ctrl_postg_for_ext_whse_mgmt_syst']) && (mb_strlen($this->container['ctrl_postg_for_ext_whse_mgmt_syst']) > 1)) {
            $invalidProperties[] = "invalid value for 'ctrl_postg_for_ext_whse_mgmt_syst', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['goods_movement_code']) && (mb_strlen($this->container['goods_movement_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'goods_movement_code', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material_document_year
     *
     * @return string|null
     */
    public function getMaterialDocumentYear()
    {
        return $this->container['material_document_year'];
    }

    /**
     * Sets material_document_year
     *
     * @param string|null $material_document_year material_document_year
     *
     * @return self
     */
    public function setMaterialDocumentYear($material_document_year)
    {
        if (is_null($material_document_year)) {
            throw new \InvalidArgumentException('non-nullable material_document_year cannot be null');
        }
        if ((mb_strlen($material_document_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $material_document_year when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 4.');
        }

        $this->container['material_document_year'] = $material_document_year;

        return $this;
    }

    /**
     * Gets material_document
     *
     * @return string|null
     */
    public function getMaterialDocument()
    {
        return $this->container['material_document'];
    }

    /**
     * Sets material_document
     *
     * @param string|null $material_document Number of Material Document
     *
     * @return self
     */
    public function setMaterialDocument($material_document)
    {
        if (is_null($material_document)) {
            throw new \InvalidArgumentException('non-nullable material_document cannot be null');
        }
        if ((mb_strlen($material_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $material_document when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 10.');
        }

        $this->container['material_document'] = $material_document;

        return $this;
    }

    /**
     * Gets inventory_transaction_type
     *
     * @return string|null
     */
    public function getInventoryTransactionType()
    {
        return $this->container['inventory_transaction_type'];
    }

    /**
     * Sets inventory_transaction_type
     *
     * @param string|null $inventory_transaction_type Transaction/Event Type
     *
     * @return self
     */
    public function setInventoryTransactionType($inventory_transaction_type)
    {
        if (is_null($inventory_transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_transaction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_transaction_type) && (mb_strlen($inventory_transaction_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inventory_transaction_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['inventory_transaction_type'] = $inventory_transaction_type;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return string|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param string|null $document_date Document Date in Document
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        if (is_null($document_date)) {
            array_push($this->openAPINullablesSetToNull, 'document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets posting_date
     *
     * @return string|null
     */
    public function getPostingDate()
    {
        return $this->container['posting_date'];
    }

    /**
     * Sets posting_date
     *
     * @param string|null $posting_date Posting Date in the Document
     *
     * @return self
     */
    public function setPostingDate($posting_date)
    {
        if (is_null($posting_date)) {
            array_push($this->openAPINullablesSetToNull, 'posting_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('posting_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['posting_date'] = $posting_date;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Day On Which Accounting Document Was Entered
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time creation_time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets material_document_header_text
     *
     * @return string|null
     */
    public function getMaterialDocumentHeaderText()
    {
        return $this->container['material_document_header_text'];
    }

    /**
     * Sets material_document_header_text
     *
     * @param string|null $material_document_header_text material_document_header_text
     *
     * @return self
     */
    public function setMaterialDocumentHeaderText($material_document_header_text)
    {
        if (is_null($material_document_header_text)) {
            array_push($this->openAPINullablesSetToNull, 'material_document_header_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_document_header_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_document_header_text) && (mb_strlen($material_document_header_text) > 25)) {
            throw new \InvalidArgumentException('invalid length for $material_document_header_text when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 25.');
        }

        $this->container['material_document_header_text'] = $material_document_header_text;

        return $this;
    }

    /**
     * Gets reference_document
     *
     * @return string|null
     */
    public function getReferenceDocument()
    {
        return $this->container['reference_document'];
    }

    /**
     * Sets reference_document
     *
     * @param string|null $reference_document Reference Document Number
     *
     * @return self
     */
    public function setReferenceDocument($reference_document)
    {
        if (is_null($reference_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_document) && (mb_strlen($reference_document) > 16)) {
            throw new \InvalidArgumentException('invalid length for $reference_document when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 16.');
        }

        $this->container['reference_document'] = $reference_document;

        return $this;
    }

    /**
     * Gets version_for_printing_slip
     *
     * @return string|null
     */
    public function getVersionForPrintingSlip()
    {
        return $this->container['version_for_printing_slip'];
    }

    /**
     * Sets version_for_printing_slip
     *
     * @param string|null $version_for_printing_slip Version for Printing GR/GI Slip
     *
     * @return self
     */
    public function setVersionForPrintingSlip($version_for_printing_slip)
    {
        if (is_null($version_for_printing_slip)) {
            array_push($this->openAPINullablesSetToNull, 'version_for_printing_slip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version_for_printing_slip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($version_for_printing_slip) && (mb_strlen($version_for_printing_slip) > 1)) {
            throw new \InvalidArgumentException('invalid length for $version_for_printing_slip when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['version_for_printing_slip'] = $version_for_printing_slip;

        return $this;
    }

    /**
     * Gets manual_print_is_triggered
     *
     * @return string|null
     */
    public function getManualPrintIsTriggered()
    {
        return $this->container['manual_print_is_triggered'];
    }

    /**
     * Sets manual_print_is_triggered
     *
     * @param string|null $manual_print_is_triggered Print via Output Control
     *
     * @return self
     */
    public function setManualPrintIsTriggered($manual_print_is_triggered)
    {
        if (is_null($manual_print_is_triggered)) {
            array_push($this->openAPINullablesSetToNull, 'manual_print_is_triggered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manual_print_is_triggered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($manual_print_is_triggered) && (mb_strlen($manual_print_is_triggered) > 1)) {
            throw new \InvalidArgumentException('invalid length for $manual_print_is_triggered when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['manual_print_is_triggered'] = $manual_print_is_triggered;

        return $this;
    }

    /**
     * Gets ctrl_postg_for_ext_whse_mgmt_syst
     *
     * @return string|null
     */
    public function getCtrlPostgForExtWhseMgmtSyst()
    {
        return $this->container['ctrl_postg_for_ext_whse_mgmt_syst'];
    }

    /**
     * Sets ctrl_postg_for_ext_whse_mgmt_syst
     *
     * @param string|null $ctrl_postg_for_ext_whse_mgmt_syst Control posting for external WMS
     *
     * @return self
     */
    public function setCtrlPostgForExtWhseMgmtSyst($ctrl_postg_for_ext_whse_mgmt_syst)
    {
        if (is_null($ctrl_postg_for_ext_whse_mgmt_syst)) {
            array_push($this->openAPINullablesSetToNull, 'ctrl_postg_for_ext_whse_mgmt_syst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ctrl_postg_for_ext_whse_mgmt_syst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ctrl_postg_for_ext_whse_mgmt_syst) && (mb_strlen($ctrl_postg_for_ext_whse_mgmt_syst) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ctrl_postg_for_ext_whse_mgmt_syst when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 1.');
        }

        $this->container['ctrl_postg_for_ext_whse_mgmt_syst'] = $ctrl_postg_for_ext_whse_mgmt_syst;

        return $this;
    }

    /**
     * Gets goods_movement_code
     *
     * @return string|null
     */
    public function getGoodsMovementCode()
    {
        return $this->container['goods_movement_code'];
    }

    /**
     * Sets goods_movement_code
     *
     * @param string|null $goods_movement_code goods_movement_code
     *
     * @return self
     */
    public function setGoodsMovementCode($goods_movement_code)
    {
        if (is_null($goods_movement_code)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_code) && (mb_strlen($goods_movement_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_code when calling APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderType., must be smaller than or equal to 2.');
        }

        $this->container['goods_movement_code'] = $goods_movement_code;

        return $this;
    }

    /**
     * Gets to_material_document_item
     *
     * @return \BeLenka\SAP\MaterialDocument\Model\APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderTypeToMaterialDocumentItem|null
     */
    public function getToMaterialDocumentItem()
    {
        return $this->container['to_material_document_item'];
    }

    /**
     * Sets to_material_document_item
     *
     * @param \BeLenka\SAP\MaterialDocument\Model\APIMATERIALDOCUMENTSRVAMaterialDocumentHeaderTypeToMaterialDocumentItem|null $to_material_document_item to_material_document_item
     *
     * @return self
     */
    public function setToMaterialDocumentItem($to_material_document_item)
    {
        if (is_null($to_material_document_item)) {
            throw new \InvalidArgumentException('non-nullable to_material_document_item cannot be null');
        }
        $this->container['to_material_document_item'] = $to_material_document_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


