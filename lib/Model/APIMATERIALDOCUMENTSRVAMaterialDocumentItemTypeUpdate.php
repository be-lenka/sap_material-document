<?php
/**
 * APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Material Documents - Read, Create
 *
 * This service enables you to retrieve and create material documents, for example, to post a goods receipt for a purchase order or to document the transfer of materials between two storage locations. Additionally, the service allows you to cancel existing material documents or single items. It can be consumed by external systems and user interfaces.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\MaterialDocument\Model;

use \ArrayAccess;
use \BeLenka\SAP\MaterialDocument\ObjectSerializer;

/**
 * APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_MATERIAL_DOCUMENT_SRV.A_MaterialDocumentItemType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'material' => 'string',
        'plant' => 'string',
        'storage_location' => 'string',
        'batch' => 'string',
        'goods_movement_type' => 'string',
        'inventory_stock_type' => 'string',
        'inventory_valuation_type' => 'string',
        'inventory_special_stock_type' => 'string',
        'supplier' => 'string',
        'customer' => 'string',
        'sales_order' => 'string',
        'sales_order_item' => 'string',
        'sales_order_schedule_line' => 'string',
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'wbs_element' => 'string',
        'manufacturing_order' => 'string',
        'manufacturing_order_item' => 'string',
        'goods_movement_ref_doc_type' => 'string',
        'goods_movement_reason_code' => 'string',
        'delivery' => 'string',
        'delivery_item' => 'string',
        'account_assignment_category' => 'string',
        'cost_center' => 'string',
        'controlling_area' => 'string',
        'cost_object' => 'string',
        'gl_account' => 'string',
        'functional_area' => 'string',
        'profitability_segment' => 'string',
        'profit_center' => 'string',
        'master_fixed_asset' => 'string',
        'fixed_asset' => 'string',
        'material_base_unit' => 'string',
        'quantity_in_base_unit' => 'float',
        'entry_unit' => 'string',
        'quantity_in_entry_unit' => 'float',
        'company_code_currency' => 'string',
        'gds_mvt_ext_amt_in_co_code_crcy' => 'float',
        'sls_prc_amt_incl_vatin_co_code_crcy' => 'float',
        'fiscal_year' => 'string',
        'fiscal_year_period' => 'string',
        'fiscal_year_variant' => 'string',
        'issg_or_rcvg_material' => 'string',
        'issg_or_rcvg_batch' => 'string',
        'issuing_or_receiving_plant' => 'string',
        'issuing_or_receiving_storage_loc' => 'string',
        'issuing_or_receiving_stock_type' => 'string',
        'issg_or_rcvg_spcl_stock_ind' => 'string',
        'issuing_or_receiving_val_type' => 'string',
        'is_completely_delivered' => 'bool',
        'material_document_item_text' => 'string',
        'goods_recipient_name' => 'string',
        'unloading_point_name' => 'string',
        'shelf_life_expiration_date' => 'string',
        'manufacture_date' => 'string',
        'serial_numbers_are_created_automly' => 'bool',
        'reservation' => 'string',
        'reservation_item' => 'string',
        'reservation_item_record_type' => 'string',
        'reservation_is_finally_issued' => 'bool',
        'special_stock_idfg_sales_order' => 'string',
        'special_stock_idfg_sales_order_item' => 'string',
        'special_stock_idfg_wbs_element' => 'string',
        'is_automatically_created' => 'string',
        'material_document_line' => 'string',
        'material_document_parent_line' => 'string',
        'hierarchy_node_level' => 'string',
        'goods_movement_is_cancelled' => 'bool',
        'reversed_material_document_year' => 'string',
        'reversed_material_document' => 'string',
        'reversed_material_document_item' => 'string',
        'reference_document_fiscal_year' => 'string',
        'invtry_mgmt_ref_document_item' => 'string',
        'invtry_mgmt_reference_document' => 'string',
        'material_document_posting_type' => 'string',
        'inventory_usability_code' => 'string',
        'ewm_warehouse' => 'string',
        'ewm_storage_bin' => 'string',
        'debit_credit_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'material' => null,
        'plant' => null,
        'storage_location' => null,
        'batch' => null,
        'goods_movement_type' => null,
        'inventory_stock_type' => null,
        'inventory_valuation_type' => null,
        'inventory_special_stock_type' => null,
        'supplier' => null,
        'customer' => null,
        'sales_order' => null,
        'sales_order_item' => null,
        'sales_order_schedule_line' => null,
        'purchase_order' => null,
        'purchase_order_item' => null,
        'wbs_element' => null,
        'manufacturing_order' => null,
        'manufacturing_order_item' => null,
        'goods_movement_ref_doc_type' => null,
        'goods_movement_reason_code' => null,
        'delivery' => null,
        'delivery_item' => null,
        'account_assignment_category' => null,
        'cost_center' => null,
        'controlling_area' => null,
        'cost_object' => null,
        'gl_account' => null,
        'functional_area' => null,
        'profitability_segment' => null,
        'profit_center' => null,
        'master_fixed_asset' => null,
        'fixed_asset' => null,
        'material_base_unit' => null,
        'quantity_in_base_unit' => 'decimal',
        'entry_unit' => null,
        'quantity_in_entry_unit' => 'decimal',
        'company_code_currency' => null,
        'gds_mvt_ext_amt_in_co_code_crcy' => 'decimal',
        'sls_prc_amt_incl_vatin_co_code_crcy' => 'decimal',
        'fiscal_year' => null,
        'fiscal_year_period' => null,
        'fiscal_year_variant' => null,
        'issg_or_rcvg_material' => null,
        'issg_or_rcvg_batch' => null,
        'issuing_or_receiving_plant' => null,
        'issuing_or_receiving_storage_loc' => null,
        'issuing_or_receiving_stock_type' => null,
        'issg_or_rcvg_spcl_stock_ind' => null,
        'issuing_or_receiving_val_type' => null,
        'is_completely_delivered' => null,
        'material_document_item_text' => null,
        'goods_recipient_name' => null,
        'unloading_point_name' => null,
        'shelf_life_expiration_date' => null,
        'manufacture_date' => null,
        'serial_numbers_are_created_automly' => null,
        'reservation' => null,
        'reservation_item' => null,
        'reservation_item_record_type' => null,
        'reservation_is_finally_issued' => null,
        'special_stock_idfg_sales_order' => null,
        'special_stock_idfg_sales_order_item' => null,
        'special_stock_idfg_wbs_element' => null,
        'is_automatically_created' => null,
        'material_document_line' => null,
        'material_document_parent_line' => null,
        'hierarchy_node_level' => null,
        'goods_movement_is_cancelled' => null,
        'reversed_material_document_year' => null,
        'reversed_material_document' => null,
        'reversed_material_document_item' => null,
        'reference_document_fiscal_year' => null,
        'invtry_mgmt_ref_document_item' => null,
        'invtry_mgmt_reference_document' => null,
        'material_document_posting_type' => null,
        'inventory_usability_code' => null,
        'ewm_warehouse' => null,
        'ewm_storage_bin' => null,
        'debit_credit_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'material' => true,
		'plant' => true,
		'storage_location' => true,
		'batch' => true,
		'goods_movement_type' => true,
		'inventory_stock_type' => true,
		'inventory_valuation_type' => true,
		'inventory_special_stock_type' => true,
		'supplier' => true,
		'customer' => true,
		'sales_order' => true,
		'sales_order_item' => true,
		'sales_order_schedule_line' => true,
		'purchase_order' => true,
		'purchase_order_item' => true,
		'wbs_element' => true,
		'manufacturing_order' => true,
		'manufacturing_order_item' => true,
		'goods_movement_ref_doc_type' => true,
		'goods_movement_reason_code' => true,
		'delivery' => true,
		'delivery_item' => true,
		'account_assignment_category' => true,
		'cost_center' => true,
		'controlling_area' => true,
		'cost_object' => true,
		'gl_account' => true,
		'functional_area' => true,
		'profitability_segment' => true,
		'profit_center' => true,
		'master_fixed_asset' => true,
		'fixed_asset' => true,
		'material_base_unit' => true,
		'quantity_in_base_unit' => true,
		'entry_unit' => true,
		'quantity_in_entry_unit' => true,
		'company_code_currency' => true,
		'gds_mvt_ext_amt_in_co_code_crcy' => true,
		'sls_prc_amt_incl_vatin_co_code_crcy' => true,
		'fiscal_year' => true,
		'fiscal_year_period' => true,
		'fiscal_year_variant' => true,
		'issg_or_rcvg_material' => true,
		'issg_or_rcvg_batch' => true,
		'issuing_or_receiving_plant' => true,
		'issuing_or_receiving_storage_loc' => true,
		'issuing_or_receiving_stock_type' => true,
		'issg_or_rcvg_spcl_stock_ind' => true,
		'issuing_or_receiving_val_type' => true,
		'is_completely_delivered' => true,
		'material_document_item_text' => true,
		'goods_recipient_name' => true,
		'unloading_point_name' => true,
		'shelf_life_expiration_date' => true,
		'manufacture_date' => true,
		'serial_numbers_are_created_automly' => true,
		'reservation' => true,
		'reservation_item' => true,
		'reservation_item_record_type' => true,
		'reservation_is_finally_issued' => true,
		'special_stock_idfg_sales_order' => true,
		'special_stock_idfg_sales_order_item' => true,
		'special_stock_idfg_wbs_element' => true,
		'is_automatically_created' => true,
		'material_document_line' => true,
		'material_document_parent_line' => true,
		'hierarchy_node_level' => true,
		'goods_movement_is_cancelled' => true,
		'reversed_material_document_year' => true,
		'reversed_material_document' => true,
		'reversed_material_document_item' => true,
		'reference_document_fiscal_year' => true,
		'invtry_mgmt_ref_document_item' => true,
		'invtry_mgmt_reference_document' => true,
		'material_document_posting_type' => true,
		'inventory_usability_code' => true,
		'ewm_warehouse' => true,
		'ewm_storage_bin' => true,
		'debit_credit_code' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material' => 'Material',
        'plant' => 'Plant',
        'storage_location' => 'StorageLocation',
        'batch' => 'Batch',
        'goods_movement_type' => 'GoodsMovementType',
        'inventory_stock_type' => 'InventoryStockType',
        'inventory_valuation_type' => 'InventoryValuationType',
        'inventory_special_stock_type' => 'InventorySpecialStockType',
        'supplier' => 'Supplier',
        'customer' => 'Customer',
        'sales_order' => 'SalesOrder',
        'sales_order_item' => 'SalesOrderItem',
        'sales_order_schedule_line' => 'SalesOrderScheduleLine',
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'wbs_element' => 'WBSElement',
        'manufacturing_order' => 'ManufacturingOrder',
        'manufacturing_order_item' => 'ManufacturingOrderItem',
        'goods_movement_ref_doc_type' => 'GoodsMovementRefDocType',
        'goods_movement_reason_code' => 'GoodsMovementReasonCode',
        'delivery' => 'Delivery',
        'delivery_item' => 'DeliveryItem',
        'account_assignment_category' => 'AccountAssignmentCategory',
        'cost_center' => 'CostCenter',
        'controlling_area' => 'ControllingArea',
        'cost_object' => 'CostObject',
        'gl_account' => 'GLAccount',
        'functional_area' => 'FunctionalArea',
        'profitability_segment' => 'ProfitabilitySegment',
        'profit_center' => 'ProfitCenter',
        'master_fixed_asset' => 'MasterFixedAsset',
        'fixed_asset' => 'FixedAsset',
        'material_base_unit' => 'MaterialBaseUnit',
        'quantity_in_base_unit' => 'QuantityInBaseUnit',
        'entry_unit' => 'EntryUnit',
        'quantity_in_entry_unit' => 'QuantityInEntryUnit',
        'company_code_currency' => 'CompanyCodeCurrency',
        'gds_mvt_ext_amt_in_co_code_crcy' => 'GdsMvtExtAmtInCoCodeCrcy',
        'sls_prc_amt_incl_vatin_co_code_crcy' => 'SlsPrcAmtInclVATInCoCodeCrcy',
        'fiscal_year' => 'FiscalYear',
        'fiscal_year_period' => 'FiscalYearPeriod',
        'fiscal_year_variant' => 'FiscalYearVariant',
        'issg_or_rcvg_material' => 'IssgOrRcvgMaterial',
        'issg_or_rcvg_batch' => 'IssgOrRcvgBatch',
        'issuing_or_receiving_plant' => 'IssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'IssuingOrReceivingStorageLoc',
        'issuing_or_receiving_stock_type' => 'IssuingOrReceivingStockType',
        'issg_or_rcvg_spcl_stock_ind' => 'IssgOrRcvgSpclStockInd',
        'issuing_or_receiving_val_type' => 'IssuingOrReceivingValType',
        'is_completely_delivered' => 'IsCompletelyDelivered',
        'material_document_item_text' => 'MaterialDocumentItemText',
        'goods_recipient_name' => 'GoodsRecipientName',
        'unloading_point_name' => 'UnloadingPointName',
        'shelf_life_expiration_date' => 'ShelfLifeExpirationDate',
        'manufacture_date' => 'ManufactureDate',
        'serial_numbers_are_created_automly' => 'SerialNumbersAreCreatedAutomly',
        'reservation' => 'Reservation',
        'reservation_item' => 'ReservationItem',
        'reservation_item_record_type' => 'ReservationItemRecordType',
        'reservation_is_finally_issued' => 'ReservationIsFinallyIssued',
        'special_stock_idfg_sales_order' => 'SpecialStockIdfgSalesOrder',
        'special_stock_idfg_sales_order_item' => 'SpecialStockIdfgSalesOrderItem',
        'special_stock_idfg_wbs_element' => 'SpecialStockIdfgWBSElement',
        'is_automatically_created' => 'IsAutomaticallyCreated',
        'material_document_line' => 'MaterialDocumentLine',
        'material_document_parent_line' => 'MaterialDocumentParentLine',
        'hierarchy_node_level' => 'HierarchyNodeLevel',
        'goods_movement_is_cancelled' => 'GoodsMovementIsCancelled',
        'reversed_material_document_year' => 'ReversedMaterialDocumentYear',
        'reversed_material_document' => 'ReversedMaterialDocument',
        'reversed_material_document_item' => 'ReversedMaterialDocumentItem',
        'reference_document_fiscal_year' => 'ReferenceDocumentFiscalYear',
        'invtry_mgmt_ref_document_item' => 'InvtryMgmtRefDocumentItem',
        'invtry_mgmt_reference_document' => 'InvtryMgmtReferenceDocument',
        'material_document_posting_type' => 'MaterialDocumentPostingType',
        'inventory_usability_code' => 'InventoryUsabilityCode',
        'ewm_warehouse' => 'EWMWarehouse',
        'ewm_storage_bin' => 'EWMStorageBin',
        'debit_credit_code' => 'DebitCreditCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material' => 'setMaterial',
        'plant' => 'setPlant',
        'storage_location' => 'setStorageLocation',
        'batch' => 'setBatch',
        'goods_movement_type' => 'setGoodsMovementType',
        'inventory_stock_type' => 'setInventoryStockType',
        'inventory_valuation_type' => 'setInventoryValuationType',
        'inventory_special_stock_type' => 'setInventorySpecialStockType',
        'supplier' => 'setSupplier',
        'customer' => 'setCustomer',
        'sales_order' => 'setSalesOrder',
        'sales_order_item' => 'setSalesOrderItem',
        'sales_order_schedule_line' => 'setSalesOrderScheduleLine',
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'wbs_element' => 'setWbsElement',
        'manufacturing_order' => 'setManufacturingOrder',
        'manufacturing_order_item' => 'setManufacturingOrderItem',
        'goods_movement_ref_doc_type' => 'setGoodsMovementRefDocType',
        'goods_movement_reason_code' => 'setGoodsMovementReasonCode',
        'delivery' => 'setDelivery',
        'delivery_item' => 'setDeliveryItem',
        'account_assignment_category' => 'setAccountAssignmentCategory',
        'cost_center' => 'setCostCenter',
        'controlling_area' => 'setControllingArea',
        'cost_object' => 'setCostObject',
        'gl_account' => 'setGlAccount',
        'functional_area' => 'setFunctionalArea',
        'profitability_segment' => 'setProfitabilitySegment',
        'profit_center' => 'setProfitCenter',
        'master_fixed_asset' => 'setMasterFixedAsset',
        'fixed_asset' => 'setFixedAsset',
        'material_base_unit' => 'setMaterialBaseUnit',
        'quantity_in_base_unit' => 'setQuantityInBaseUnit',
        'entry_unit' => 'setEntryUnit',
        'quantity_in_entry_unit' => 'setQuantityInEntryUnit',
        'company_code_currency' => 'setCompanyCodeCurrency',
        'gds_mvt_ext_amt_in_co_code_crcy' => 'setGdsMvtExtAmtInCoCodeCrcy',
        'sls_prc_amt_incl_vatin_co_code_crcy' => 'setSlsPrcAmtInclVatinCoCodeCrcy',
        'fiscal_year' => 'setFiscalYear',
        'fiscal_year_period' => 'setFiscalYearPeriod',
        'fiscal_year_variant' => 'setFiscalYearVariant',
        'issg_or_rcvg_material' => 'setIssgOrRcvgMaterial',
        'issg_or_rcvg_batch' => 'setIssgOrRcvgBatch',
        'issuing_or_receiving_plant' => 'setIssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'setIssuingOrReceivingStorageLoc',
        'issuing_or_receiving_stock_type' => 'setIssuingOrReceivingStockType',
        'issg_or_rcvg_spcl_stock_ind' => 'setIssgOrRcvgSpclStockInd',
        'issuing_or_receiving_val_type' => 'setIssuingOrReceivingValType',
        'is_completely_delivered' => 'setIsCompletelyDelivered',
        'material_document_item_text' => 'setMaterialDocumentItemText',
        'goods_recipient_name' => 'setGoodsRecipientName',
        'unloading_point_name' => 'setUnloadingPointName',
        'shelf_life_expiration_date' => 'setShelfLifeExpirationDate',
        'manufacture_date' => 'setManufactureDate',
        'serial_numbers_are_created_automly' => 'setSerialNumbersAreCreatedAutomly',
        'reservation' => 'setReservation',
        'reservation_item' => 'setReservationItem',
        'reservation_item_record_type' => 'setReservationItemRecordType',
        'reservation_is_finally_issued' => 'setReservationIsFinallyIssued',
        'special_stock_idfg_sales_order' => 'setSpecialStockIdfgSalesOrder',
        'special_stock_idfg_sales_order_item' => 'setSpecialStockIdfgSalesOrderItem',
        'special_stock_idfg_wbs_element' => 'setSpecialStockIdfgWbsElement',
        'is_automatically_created' => 'setIsAutomaticallyCreated',
        'material_document_line' => 'setMaterialDocumentLine',
        'material_document_parent_line' => 'setMaterialDocumentParentLine',
        'hierarchy_node_level' => 'setHierarchyNodeLevel',
        'goods_movement_is_cancelled' => 'setGoodsMovementIsCancelled',
        'reversed_material_document_year' => 'setReversedMaterialDocumentYear',
        'reversed_material_document' => 'setReversedMaterialDocument',
        'reversed_material_document_item' => 'setReversedMaterialDocumentItem',
        'reference_document_fiscal_year' => 'setReferenceDocumentFiscalYear',
        'invtry_mgmt_ref_document_item' => 'setInvtryMgmtRefDocumentItem',
        'invtry_mgmt_reference_document' => 'setInvtryMgmtReferenceDocument',
        'material_document_posting_type' => 'setMaterialDocumentPostingType',
        'inventory_usability_code' => 'setInventoryUsabilityCode',
        'ewm_warehouse' => 'setEwmWarehouse',
        'ewm_storage_bin' => 'setEwmStorageBin',
        'debit_credit_code' => 'setDebitCreditCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material' => 'getMaterial',
        'plant' => 'getPlant',
        'storage_location' => 'getStorageLocation',
        'batch' => 'getBatch',
        'goods_movement_type' => 'getGoodsMovementType',
        'inventory_stock_type' => 'getInventoryStockType',
        'inventory_valuation_type' => 'getInventoryValuationType',
        'inventory_special_stock_type' => 'getInventorySpecialStockType',
        'supplier' => 'getSupplier',
        'customer' => 'getCustomer',
        'sales_order' => 'getSalesOrder',
        'sales_order_item' => 'getSalesOrderItem',
        'sales_order_schedule_line' => 'getSalesOrderScheduleLine',
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'wbs_element' => 'getWbsElement',
        'manufacturing_order' => 'getManufacturingOrder',
        'manufacturing_order_item' => 'getManufacturingOrderItem',
        'goods_movement_ref_doc_type' => 'getGoodsMovementRefDocType',
        'goods_movement_reason_code' => 'getGoodsMovementReasonCode',
        'delivery' => 'getDelivery',
        'delivery_item' => 'getDeliveryItem',
        'account_assignment_category' => 'getAccountAssignmentCategory',
        'cost_center' => 'getCostCenter',
        'controlling_area' => 'getControllingArea',
        'cost_object' => 'getCostObject',
        'gl_account' => 'getGlAccount',
        'functional_area' => 'getFunctionalArea',
        'profitability_segment' => 'getProfitabilitySegment',
        'profit_center' => 'getProfitCenter',
        'master_fixed_asset' => 'getMasterFixedAsset',
        'fixed_asset' => 'getFixedAsset',
        'material_base_unit' => 'getMaterialBaseUnit',
        'quantity_in_base_unit' => 'getQuantityInBaseUnit',
        'entry_unit' => 'getEntryUnit',
        'quantity_in_entry_unit' => 'getQuantityInEntryUnit',
        'company_code_currency' => 'getCompanyCodeCurrency',
        'gds_mvt_ext_amt_in_co_code_crcy' => 'getGdsMvtExtAmtInCoCodeCrcy',
        'sls_prc_amt_incl_vatin_co_code_crcy' => 'getSlsPrcAmtInclVatinCoCodeCrcy',
        'fiscal_year' => 'getFiscalYear',
        'fiscal_year_period' => 'getFiscalYearPeriod',
        'fiscal_year_variant' => 'getFiscalYearVariant',
        'issg_or_rcvg_material' => 'getIssgOrRcvgMaterial',
        'issg_or_rcvg_batch' => 'getIssgOrRcvgBatch',
        'issuing_or_receiving_plant' => 'getIssuingOrReceivingPlant',
        'issuing_or_receiving_storage_loc' => 'getIssuingOrReceivingStorageLoc',
        'issuing_or_receiving_stock_type' => 'getIssuingOrReceivingStockType',
        'issg_or_rcvg_spcl_stock_ind' => 'getIssgOrRcvgSpclStockInd',
        'issuing_or_receiving_val_type' => 'getIssuingOrReceivingValType',
        'is_completely_delivered' => 'getIsCompletelyDelivered',
        'material_document_item_text' => 'getMaterialDocumentItemText',
        'goods_recipient_name' => 'getGoodsRecipientName',
        'unloading_point_name' => 'getUnloadingPointName',
        'shelf_life_expiration_date' => 'getShelfLifeExpirationDate',
        'manufacture_date' => 'getManufactureDate',
        'serial_numbers_are_created_automly' => 'getSerialNumbersAreCreatedAutomly',
        'reservation' => 'getReservation',
        'reservation_item' => 'getReservationItem',
        'reservation_item_record_type' => 'getReservationItemRecordType',
        'reservation_is_finally_issued' => 'getReservationIsFinallyIssued',
        'special_stock_idfg_sales_order' => 'getSpecialStockIdfgSalesOrder',
        'special_stock_idfg_sales_order_item' => 'getSpecialStockIdfgSalesOrderItem',
        'special_stock_idfg_wbs_element' => 'getSpecialStockIdfgWbsElement',
        'is_automatically_created' => 'getIsAutomaticallyCreated',
        'material_document_line' => 'getMaterialDocumentLine',
        'material_document_parent_line' => 'getMaterialDocumentParentLine',
        'hierarchy_node_level' => 'getHierarchyNodeLevel',
        'goods_movement_is_cancelled' => 'getGoodsMovementIsCancelled',
        'reversed_material_document_year' => 'getReversedMaterialDocumentYear',
        'reversed_material_document' => 'getReversedMaterialDocument',
        'reversed_material_document_item' => 'getReversedMaterialDocumentItem',
        'reference_document_fiscal_year' => 'getReferenceDocumentFiscalYear',
        'invtry_mgmt_ref_document_item' => 'getInvtryMgmtRefDocumentItem',
        'invtry_mgmt_reference_document' => 'getInvtryMgmtReferenceDocument',
        'material_document_posting_type' => 'getMaterialDocumentPostingType',
        'inventory_usability_code' => 'getInventoryUsabilityCode',
        'ewm_warehouse' => 'getEwmWarehouse',
        'ewm_storage_bin' => 'getEwmStorageBin',
        'debit_credit_code' => 'getDebitCreditCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('goods_movement_type', $data ?? [], null);
        $this->setIfExists('inventory_stock_type', $data ?? [], null);
        $this->setIfExists('inventory_valuation_type', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_type', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('sales_order_item', $data ?? [], null);
        $this->setIfExists('sales_order_schedule_line', $data ?? [], null);
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('wbs_element', $data ?? [], null);
        $this->setIfExists('manufacturing_order', $data ?? [], null);
        $this->setIfExists('manufacturing_order_item', $data ?? [], null);
        $this->setIfExists('goods_movement_ref_doc_type', $data ?? [], null);
        $this->setIfExists('goods_movement_reason_code', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('delivery_item', $data ?? [], null);
        $this->setIfExists('account_assignment_category', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('controlling_area', $data ?? [], null);
        $this->setIfExists('cost_object', $data ?? [], null);
        $this->setIfExists('gl_account', $data ?? [], null);
        $this->setIfExists('functional_area', $data ?? [], null);
        $this->setIfExists('profitability_segment', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('master_fixed_asset', $data ?? [], null);
        $this->setIfExists('fixed_asset', $data ?? [], null);
        $this->setIfExists('material_base_unit', $data ?? [], null);
        $this->setIfExists('quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('entry_unit', $data ?? [], null);
        $this->setIfExists('quantity_in_entry_unit', $data ?? [], null);
        $this->setIfExists('company_code_currency', $data ?? [], null);
        $this->setIfExists('gds_mvt_ext_amt_in_co_code_crcy', $data ?? [], null);
        $this->setIfExists('sls_prc_amt_incl_vatin_co_code_crcy', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('fiscal_year_period', $data ?? [], null);
        $this->setIfExists('fiscal_year_variant', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_material', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_batch', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_plant', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_storage_loc', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_stock_type', $data ?? [], null);
        $this->setIfExists('issg_or_rcvg_spcl_stock_ind', $data ?? [], null);
        $this->setIfExists('issuing_or_receiving_val_type', $data ?? [], null);
        $this->setIfExists('is_completely_delivered', $data ?? [], null);
        $this->setIfExists('material_document_item_text', $data ?? [], null);
        $this->setIfExists('goods_recipient_name', $data ?? [], null);
        $this->setIfExists('unloading_point_name', $data ?? [], null);
        $this->setIfExists('shelf_life_expiration_date', $data ?? [], null);
        $this->setIfExists('manufacture_date', $data ?? [], null);
        $this->setIfExists('serial_numbers_are_created_automly', $data ?? [], null);
        $this->setIfExists('reservation', $data ?? [], null);
        $this->setIfExists('reservation_item', $data ?? [], null);
        $this->setIfExists('reservation_item_record_type', $data ?? [], null);
        $this->setIfExists('reservation_is_finally_issued', $data ?? [], null);
        $this->setIfExists('special_stock_idfg_sales_order', $data ?? [], null);
        $this->setIfExists('special_stock_idfg_sales_order_item', $data ?? [], null);
        $this->setIfExists('special_stock_idfg_wbs_element', $data ?? [], null);
        $this->setIfExists('is_automatically_created', $data ?? [], null);
        $this->setIfExists('material_document_line', $data ?? [], null);
        $this->setIfExists('material_document_parent_line', $data ?? [], null);
        $this->setIfExists('hierarchy_node_level', $data ?? [], null);
        $this->setIfExists('goods_movement_is_cancelled', $data ?? [], null);
        $this->setIfExists('reversed_material_document_year', $data ?? [], null);
        $this->setIfExists('reversed_material_document', $data ?? [], null);
        $this->setIfExists('reversed_material_document_item', $data ?? [], null);
        $this->setIfExists('reference_document_fiscal_year', $data ?? [], null);
        $this->setIfExists('invtry_mgmt_ref_document_item', $data ?? [], null);
        $this->setIfExists('invtry_mgmt_reference_document', $data ?? [], null);
        $this->setIfExists('material_document_posting_type', $data ?? [], null);
        $this->setIfExists('inventory_usability_code', $data ?? [], null);
        $this->setIfExists('ewm_warehouse', $data ?? [], null);
        $this->setIfExists('ewm_storage_bin', $data ?? [], null);
        $this->setIfExists('debit_credit_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['goods_movement_type']) && (mb_strlen($this->container['goods_movement_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'goods_movement_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['inventory_stock_type']) && (mb_strlen($this->container['inventory_stock_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'inventory_stock_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['inventory_valuation_type']) && (mb_strlen($this->container['inventory_valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'inventory_valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['inventory_special_stock_type']) && (mb_strlen($this->container['inventory_special_stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_item']) && (mb_strlen($this->container['sales_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_order_schedule_line']) && (mb_strlen($this->container['sales_order_schedule_line']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_schedule_line', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchase_order']) && (mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_order_item']) && (mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['wbs_element']) && (mb_strlen($this->container['wbs_element']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['manufacturing_order']) && (mb_strlen($this->container['manufacturing_order']) > 12)) {
            $invalidProperties[] = "invalid value for 'manufacturing_order', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['manufacturing_order_item']) && (mb_strlen($this->container['manufacturing_order_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'manufacturing_order_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['goods_movement_ref_doc_type']) && (mb_strlen($this->container['goods_movement_ref_doc_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'goods_movement_ref_doc_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['goods_movement_reason_code']) && (mb_strlen($this->container['goods_movement_reason_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'goods_movement_reason_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['delivery']) && (mb_strlen($this->container['delivery']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_item']) && (mb_strlen($this->container['delivery_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'delivery_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['account_assignment_category']) && (mb_strlen($this->container['account_assignment_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'account_assignment_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['controlling_area']) && (mb_strlen($this->container['controlling_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'controlling_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cost_object']) && (mb_strlen($this->container['cost_object']) > 12)) {
            $invalidProperties[] = "invalid value for 'cost_object', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['gl_account']) && (mb_strlen($this->container['gl_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'gl_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['functional_area']) && (mb_strlen($this->container['functional_area']) > 16)) {
            $invalidProperties[] = "invalid value for 'functional_area', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['profitability_segment']) && (mb_strlen($this->container['profitability_segment']) > 10)) {
            $invalidProperties[] = "invalid value for 'profitability_segment', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['master_fixed_asset']) && (mb_strlen($this->container['master_fixed_asset']) > 12)) {
            $invalidProperties[] = "invalid value for 'master_fixed_asset', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['fixed_asset']) && (mb_strlen($this->container['fixed_asset']) > 4)) {
            $invalidProperties[] = "invalid value for 'fixed_asset', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material_base_unit']) && (mb_strlen($this->container['material_base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'material_base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['entry_unit']) && (mb_strlen($this->container['entry_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'entry_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['company_code_currency']) && (mb_strlen($this->container['company_code_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'company_code_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['fiscal_year']) && (mb_strlen($this->container['fiscal_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'fiscal_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['fiscal_year_period']) && (mb_strlen($this->container['fiscal_year_period']) > 7)) {
            $invalidProperties[] = "invalid value for 'fiscal_year_period', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['fiscal_year_variant']) && (mb_strlen($this->container['fiscal_year_variant']) > 2)) {
            $invalidProperties[] = "invalid value for 'fiscal_year_variant', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['issg_or_rcvg_material']) && (mb_strlen($this->container['issg_or_rcvg_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['issg_or_rcvg_batch']) && (mb_strlen($this->container['issg_or_rcvg_batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['issuing_or_receiving_plant']) && (mb_strlen($this->container['issuing_or_receiving_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['issuing_or_receiving_storage_loc']) && (mb_strlen($this->container['issuing_or_receiving_storage_loc']) > 4)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_storage_loc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['issuing_or_receiving_stock_type']) && (mb_strlen($this->container['issuing_or_receiving_stock_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_stock_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['issg_or_rcvg_spcl_stock_ind']) && (mb_strlen($this->container['issg_or_rcvg_spcl_stock_ind']) > 1)) {
            $invalidProperties[] = "invalid value for 'issg_or_rcvg_spcl_stock_ind', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['issuing_or_receiving_val_type']) && (mb_strlen($this->container['issuing_or_receiving_val_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'issuing_or_receiving_val_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['material_document_item_text']) && (mb_strlen($this->container['material_document_item_text']) > 50)) {
            $invalidProperties[] = "invalid value for 'material_document_item_text', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['goods_recipient_name']) && (mb_strlen($this->container['goods_recipient_name']) > 12)) {
            $invalidProperties[] = "invalid value for 'goods_recipient_name', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['unloading_point_name']) && (mb_strlen($this->container['unloading_point_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'unloading_point_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['reservation']) && (mb_strlen($this->container['reservation']) > 10)) {
            $invalidProperties[] = "invalid value for 'reservation', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reservation_item']) && (mb_strlen($this->container['reservation_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'reservation_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reservation_item_record_type']) && (mb_strlen($this->container['reservation_item_record_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'reservation_item_record_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['special_stock_idfg_sales_order']) && (mb_strlen($this->container['special_stock_idfg_sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'special_stock_idfg_sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['special_stock_idfg_sales_order_item']) && (mb_strlen($this->container['special_stock_idfg_sales_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'special_stock_idfg_sales_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['special_stock_idfg_wbs_element']) && (mb_strlen($this->container['special_stock_idfg_wbs_element']) > 24)) {
            $invalidProperties[] = "invalid value for 'special_stock_idfg_wbs_element', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['is_automatically_created']) && (mb_strlen($this->container['is_automatically_created']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_automatically_created', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_document_line']) && (mb_strlen($this->container['material_document_line']) > 6)) {
            $invalidProperties[] = "invalid value for 'material_document_line', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['material_document_parent_line']) && (mb_strlen($this->container['material_document_parent_line']) > 6)) {
            $invalidProperties[] = "invalid value for 'material_document_parent_line', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['hierarchy_node_level']) && (mb_strlen($this->container['hierarchy_node_level']) > 2)) {
            $invalidProperties[] = "invalid value for 'hierarchy_node_level', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reversed_material_document_year']) && (mb_strlen($this->container['reversed_material_document_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'reversed_material_document_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reversed_material_document']) && (mb_strlen($this->container['reversed_material_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reversed_material_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reversed_material_document_item']) && (mb_strlen($this->container['reversed_material_document_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'reversed_material_document_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reference_document_fiscal_year']) && (mb_strlen($this->container['reference_document_fiscal_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_document_fiscal_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['invtry_mgmt_ref_document_item']) && (mb_strlen($this->container['invtry_mgmt_ref_document_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'invtry_mgmt_ref_document_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['invtry_mgmt_reference_document']) && (mb_strlen($this->container['invtry_mgmt_reference_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'invtry_mgmt_reference_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['material_document_posting_type']) && (mb_strlen($this->container['material_document_posting_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'material_document_posting_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_usability_code']) && (mb_strlen($this->container['inventory_usability_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_usability_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ewm_warehouse']) && (mb_strlen($this->container['ewm_warehouse']) > 4)) {
            $invalidProperties[] = "invalid value for 'ewm_warehouse', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ewm_storage_bin']) && (mb_strlen($this->container['ewm_storage_bin']) > 18)) {
            $invalidProperties[] = "invalid value for 'ewm_storage_bin', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['debit_credit_code']) && (mb_strlen($this->container['debit_credit_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'debit_credit_code', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            array_push($this->openAPINullablesSetToNull, 'plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant) && (mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets goods_movement_type
     *
     * @return string|null
     */
    public function getGoodsMovementType()
    {
        return $this->container['goods_movement_type'];
    }

    /**
     * Sets goods_movement_type
     *
     * @param string|null $goods_movement_type Movement Type (Inventory Management)
     *
     * @return self
     */
    public function setGoodsMovementType($goods_movement_type)
    {
        if (is_null($goods_movement_type)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_type) && (mb_strlen($goods_movement_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['goods_movement_type'] = $goods_movement_type;

        return $this;
    }

    /**
     * Gets inventory_stock_type
     *
     * @return string|null
     */
    public function getInventoryStockType()
    {
        return $this->container['inventory_stock_type'];
    }

    /**
     * Sets inventory_stock_type
     *
     * @param string|null $inventory_stock_type Stock Type of Goods Movement (Stock Identifier)
     *
     * @return self
     */
    public function setInventoryStockType($inventory_stock_type)
    {
        if (is_null($inventory_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_stock_type) && (mb_strlen($inventory_stock_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $inventory_stock_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['inventory_stock_type'] = $inventory_stock_type;

        return $this;
    }

    /**
     * Gets inventory_valuation_type
     *
     * @return string|null
     */
    public function getInventoryValuationType()
    {
        return $this->container['inventory_valuation_type'];
    }

    /**
     * Sets inventory_valuation_type
     *
     * @param string|null $inventory_valuation_type inventory_valuation_type
     *
     * @return self
     */
    public function setInventoryValuationType($inventory_valuation_type)
    {
        if (is_null($inventory_valuation_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_valuation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_valuation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_valuation_type) && (mb_strlen($inventory_valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $inventory_valuation_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['inventory_valuation_type'] = $inventory_valuation_type;

        return $this;
    }

    /**
     * Gets inventory_special_stock_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockType()
    {
        return $this->container['inventory_special_stock_type'];
    }

    /**
     * Sets inventory_special_stock_type
     *
     * @param string|null $inventory_special_stock_type inventory_special_stock_type
     *
     * @return self
     */
    public function setInventorySpecialStockType($inventory_special_stock_type)
    {
        if (is_null($inventory_special_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_special_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_special_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_special_stock_type) && (mb_strlen($inventory_special_stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_type'] = $inventory_special_stock_type;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Supplier's Account Number
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier) && (mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Account number of customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            array_push($this->openAPINullablesSetToNull, 'customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer) && (mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order Sales Order Number
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order) && (mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets sales_order_item
     *
     * @return string|null
     */
    public function getSalesOrderItem()
    {
        return $this->container['sales_order_item'];
    }

    /**
     * Sets sales_order_item
     *
     * @param string|null $sales_order_item sales_order_item
     *
     * @return self
     */
    public function setSalesOrderItem($sales_order_item)
    {
        if (is_null($sales_order_item)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_item) && (mb_strlen($sales_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_item'] = $sales_order_item;

        return $this;
    }

    /**
     * Gets sales_order_schedule_line
     *
     * @return string|null
     */
    public function getSalesOrderScheduleLine()
    {
        return $this->container['sales_order_schedule_line'];
    }

    /**
     * Sets sales_order_schedule_line
     *
     * @param string|null $sales_order_schedule_line sales_order_schedule_line
     *
     * @return self
     */
    public function setSalesOrderScheduleLine($sales_order_schedule_line)
    {
        if (is_null($sales_order_schedule_line)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_schedule_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_schedule_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_schedule_line) && (mb_strlen($sales_order_schedule_line) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_schedule_line when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_schedule_line'] = $sales_order_schedule_line;

        return $this;
    }

    /**
     * Gets purchase_order
     *
     * @return string|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string|null $purchase_order Purchase Order Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order) && (mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string|null
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string|null $purchase_order_item Item Number of Purchasing Document
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_item) && (mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets wbs_element
     *
     * @return string|null
     */
    public function getWbsElement()
    {
        return $this->container['wbs_element'];
    }

    /**
     * Sets wbs_element
     *
     * @param string|null $wbs_element Work Breakdown Structure Element (WBS Element)
     *
     * @return self
     */
    public function setWbsElement($wbs_element)
    {
        if (is_null($wbs_element)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element) && (mb_strlen($wbs_element) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element'] = $wbs_element;

        return $this;
    }

    /**
     * Gets manufacturing_order
     *
     * @return string|null
     */
    public function getManufacturingOrder()
    {
        return $this->container['manufacturing_order'];
    }

    /**
     * Sets manufacturing_order
     *
     * @param string|null $manufacturing_order manufacturing_order
     *
     * @return self
     */
    public function setManufacturingOrder($manufacturing_order)
    {
        if (is_null($manufacturing_order)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturing_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturing_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($manufacturing_order) && (mb_strlen($manufacturing_order) > 12)) {
            throw new \InvalidArgumentException('invalid length for $manufacturing_order when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['manufacturing_order'] = $manufacturing_order;

        return $this;
    }

    /**
     * Gets manufacturing_order_item
     *
     * @return string|null
     */
    public function getManufacturingOrderItem()
    {
        return $this->container['manufacturing_order_item'];
    }

    /**
     * Sets manufacturing_order_item
     *
     * @param string|null $manufacturing_order_item manufacturing_order_item
     *
     * @return self
     */
    public function setManufacturingOrderItem($manufacturing_order_item)
    {
        if (is_null($manufacturing_order_item)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturing_order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturing_order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($manufacturing_order_item) && (mb_strlen($manufacturing_order_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $manufacturing_order_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['manufacturing_order_item'] = $manufacturing_order_item;

        return $this;
    }

    /**
     * Gets goods_movement_ref_doc_type
     *
     * @return string|null
     */
    public function getGoodsMovementRefDocType()
    {
        return $this->container['goods_movement_ref_doc_type'];
    }

    /**
     * Sets goods_movement_ref_doc_type
     *
     * @param string|null $goods_movement_ref_doc_type Goods movement ref doc type
     *
     * @return self
     */
    public function setGoodsMovementRefDocType($goods_movement_ref_doc_type)
    {
        if (is_null($goods_movement_ref_doc_type)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_ref_doc_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_ref_doc_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_ref_doc_type) && (mb_strlen($goods_movement_ref_doc_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_ref_doc_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['goods_movement_ref_doc_type'] = $goods_movement_ref_doc_type;

        return $this;
    }

    /**
     * Gets goods_movement_reason_code
     *
     * @return string|null
     */
    public function getGoodsMovementReasonCode()
    {
        return $this->container['goods_movement_reason_code'];
    }

    /**
     * Sets goods_movement_reason_code
     *
     * @param string|null $goods_movement_reason_code goods_movement_reason_code
     *
     * @return self
     */
    public function setGoodsMovementReasonCode($goods_movement_reason_code)
    {
        if (is_null($goods_movement_reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_movement_reason_code) && (mb_strlen($goods_movement_reason_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $goods_movement_reason_code when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['goods_movement_reason_code'] = $goods_movement_reason_code;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return string|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param string|null $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            array_push($this->openAPINullablesSetToNull, 'delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery) && (mb_strlen($delivery) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets delivery_item
     *
     * @return string|null
     */
    public function getDeliveryItem()
    {
        return $this->container['delivery_item'];
    }

    /**
     * Sets delivery_item
     *
     * @param string|null $delivery_item delivery_item
     *
     * @return self
     */
    public function setDeliveryItem($delivery_item)
    {
        if (is_null($delivery_item)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_item) && (mb_strlen($delivery_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $delivery_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['delivery_item'] = $delivery_item;

        return $this;
    }

    /**
     * Gets account_assignment_category
     *
     * @return string|null
     */
    public function getAccountAssignmentCategory()
    {
        return $this->container['account_assignment_category'];
    }

    /**
     * Sets account_assignment_category
     *
     * @param string|null $account_assignment_category account_assignment_category
     *
     * @return self
     */
    public function setAccountAssignmentCategory($account_assignment_category)
    {
        if (is_null($account_assignment_category)) {
            array_push($this->openAPINullablesSetToNull, 'account_assignment_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_assignment_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_assignment_category) && (mb_strlen($account_assignment_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $account_assignment_category when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['account_assignment_category'] = $account_assignment_category;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            array_push($this->openAPINullablesSetToNull, 'cost_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_center) && (mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets controlling_area
     *
     * @return string|null
     */
    public function getControllingArea()
    {
        return $this->container['controlling_area'];
    }

    /**
     * Sets controlling_area
     *
     * @param string|null $controlling_area controlling_area
     *
     * @return self
     */
    public function setControllingArea($controlling_area)
    {
        if (is_null($controlling_area)) {
            array_push($this->openAPINullablesSetToNull, 'controlling_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('controlling_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($controlling_area) && (mb_strlen($controlling_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $controlling_area when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['controlling_area'] = $controlling_area;

        return $this;
    }

    /**
     * Gets cost_object
     *
     * @return string|null
     */
    public function getCostObject()
    {
        return $this->container['cost_object'];
    }

    /**
     * Sets cost_object
     *
     * @param string|null $cost_object cost_object
     *
     * @return self
     */
    public function setCostObject($cost_object)
    {
        if (is_null($cost_object)) {
            array_push($this->openAPINullablesSetToNull, 'cost_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_object) && (mb_strlen($cost_object) > 12)) {
            throw new \InvalidArgumentException('invalid length for $cost_object when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['cost_object'] = $cost_object;

        return $this;
    }

    /**
     * Gets gl_account
     *
     * @return string|null
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     *
     * @param string|null $gl_account G/L Account Number
     *
     * @return self
     */
    public function setGlAccount($gl_account)
    {
        if (is_null($gl_account)) {
            array_push($this->openAPINullablesSetToNull, 'gl_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gl_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gl_account) && (mb_strlen($gl_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $gl_account when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets functional_area
     *
     * @return string|null
     */
    public function getFunctionalArea()
    {
        return $this->container['functional_area'];
    }

    /**
     * Sets functional_area
     *
     * @param string|null $functional_area functional_area
     *
     * @return self
     */
    public function setFunctionalArea($functional_area)
    {
        if (is_null($functional_area)) {
            array_push($this->openAPINullablesSetToNull, 'functional_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('functional_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($functional_area) && (mb_strlen($functional_area) > 16)) {
            throw new \InvalidArgumentException('invalid length for $functional_area when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 16.');
        }

        $this->container['functional_area'] = $functional_area;

        return $this;
    }

    /**
     * Gets profitability_segment
     *
     * @return string|null
     */
    public function getProfitabilitySegment()
    {
        return $this->container['profitability_segment'];
    }

    /**
     * Sets profitability_segment
     *
     * @param string|null $profitability_segment profitability_segment
     *
     * @return self
     */
    public function setProfitabilitySegment($profitability_segment)
    {
        if (is_null($profitability_segment)) {
            array_push($this->openAPINullablesSetToNull, 'profitability_segment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profitability_segment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profitability_segment) && (mb_strlen($profitability_segment) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profitability_segment when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['profitability_segment'] = $profitability_segment;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets master_fixed_asset
     *
     * @return string|null
     */
    public function getMasterFixedAsset()
    {
        return $this->container['master_fixed_asset'];
    }

    /**
     * Sets master_fixed_asset
     *
     * @param string|null $master_fixed_asset Main Asset Number
     *
     * @return self
     */
    public function setMasterFixedAsset($master_fixed_asset)
    {
        if (is_null($master_fixed_asset)) {
            array_push($this->openAPINullablesSetToNull, 'master_fixed_asset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('master_fixed_asset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($master_fixed_asset) && (mb_strlen($master_fixed_asset) > 12)) {
            throw new \InvalidArgumentException('invalid length for $master_fixed_asset when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['master_fixed_asset'] = $master_fixed_asset;

        return $this;
    }

    /**
     * Gets fixed_asset
     *
     * @return string|null
     */
    public function getFixedAsset()
    {
        return $this->container['fixed_asset'];
    }

    /**
     * Sets fixed_asset
     *
     * @param string|null $fixed_asset Asset Subnumber
     *
     * @return self
     */
    public function setFixedAsset($fixed_asset)
    {
        if (is_null($fixed_asset)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_asset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_asset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fixed_asset) && (mb_strlen($fixed_asset) > 4)) {
            throw new \InvalidArgumentException('invalid length for $fixed_asset when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['fixed_asset'] = $fixed_asset;

        return $this;
    }

    /**
     * Gets material_base_unit
     *
     * @return string|null
     */
    public function getMaterialBaseUnit()
    {
        return $this->container['material_base_unit'];
    }

    /**
     * Sets material_base_unit
     *
     * @param string|null $material_base_unit material_base_unit
     *
     * @return self
     */
    public function setMaterialBaseUnit($material_base_unit)
    {
        if (is_null($material_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'material_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_base_unit) && (mb_strlen($material_base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $material_base_unit when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['material_base_unit'] = $material_base_unit;

        return $this;
    }

    /**
     * Gets quantity_in_base_unit
     *
     * @return float|null
     */
    public function getQuantityInBaseUnit()
    {
        return $this->container['quantity_in_base_unit'];
    }

    /**
     * Sets quantity_in_base_unit
     *
     * @param float|null $quantity_in_base_unit quantity_in_base_unit
     *
     * @return self
     */
    public function setQuantityInBaseUnit($quantity_in_base_unit)
    {
        if (is_null($quantity_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['quantity_in_base_unit'] = $quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets entry_unit
     *
     * @return string|null
     */
    public function getEntryUnit()
    {
        return $this->container['entry_unit'];
    }

    /**
     * Sets entry_unit
     *
     * @param string|null $entry_unit Unit of entry
     *
     * @return self
     */
    public function setEntryUnit($entry_unit)
    {
        if (is_null($entry_unit)) {
            array_push($this->openAPINullablesSetToNull, 'entry_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entry_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($entry_unit) && (mb_strlen($entry_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $entry_unit when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['entry_unit'] = $entry_unit;

        return $this;
    }

    /**
     * Gets quantity_in_entry_unit
     *
     * @return float|null
     */
    public function getQuantityInEntryUnit()
    {
        return $this->container['quantity_in_entry_unit'];
    }

    /**
     * Sets quantity_in_entry_unit
     *
     * @param float|null $quantity_in_entry_unit Quantity in unit of entry
     *
     * @return self
     */
    public function setQuantityInEntryUnit($quantity_in_entry_unit)
    {
        if (is_null($quantity_in_entry_unit)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_in_entry_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_in_entry_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['quantity_in_entry_unit'] = $quantity_in_entry_unit;

        return $this;
    }

    /**
     * Gets company_code_currency
     *
     * @return string|null
     */
    public function getCompanyCodeCurrency()
    {
        return $this->container['company_code_currency'];
    }

    /**
     * Sets company_code_currency
     *
     * @param string|null $company_code_currency company_code_currency
     *
     * @return self
     */
    public function setCompanyCodeCurrency($company_code_currency)
    {
        if (is_null($company_code_currency)) {
            array_push($this->openAPINullablesSetToNull, 'company_code_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_code_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_code_currency) && (mb_strlen($company_code_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $company_code_currency when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['company_code_currency'] = $company_code_currency;

        return $this;
    }

    /**
     * Gets gds_mvt_ext_amt_in_co_code_crcy
     *
     * @return float|null
     */
    public function getGdsMvtExtAmtInCoCodeCrcy()
    {
        return $this->container['gds_mvt_ext_amt_in_co_code_crcy'];
    }

    /**
     * Sets gds_mvt_ext_amt_in_co_code_crcy
     *
     * @param float|null $gds_mvt_ext_amt_in_co_code_crcy Externally Entered Posting Amount in Local Currency
     *
     * @return self
     */
    public function setGdsMvtExtAmtInCoCodeCrcy($gds_mvt_ext_amt_in_co_code_crcy)
    {
        if (is_null($gds_mvt_ext_amt_in_co_code_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'gds_mvt_ext_amt_in_co_code_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gds_mvt_ext_amt_in_co_code_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['gds_mvt_ext_amt_in_co_code_crcy'] = $gds_mvt_ext_amt_in_co_code_crcy;

        return $this;
    }

    /**
     * Gets sls_prc_amt_incl_vatin_co_code_crcy
     *
     * @return float|null
     */
    public function getSlsPrcAmtInclVatinCoCodeCrcy()
    {
        return $this->container['sls_prc_amt_incl_vatin_co_code_crcy'];
    }

    /**
     * Sets sls_prc_amt_incl_vatin_co_code_crcy
     *
     * @param float|null $sls_prc_amt_incl_vatin_co_code_crcy Value at Sales Prices Including Value-Added Tax
     *
     * @return self
     */
    public function setSlsPrcAmtInclVatinCoCodeCrcy($sls_prc_amt_incl_vatin_co_code_crcy)
    {
        if (is_null($sls_prc_amt_incl_vatin_co_code_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'sls_prc_amt_incl_vatin_co_code_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_prc_amt_incl_vatin_co_code_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['sls_prc_amt_incl_vatin_co_code_crcy'] = $sls_prc_amt_incl_vatin_co_code_crcy;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return string|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param string|null $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_year) && (mb_strlen($fiscal_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_year when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets fiscal_year_period
     *
     * @return string|null
     */
    public function getFiscalYearPeriod()
    {
        return $this->container['fiscal_year_period'];
    }

    /**
     * Sets fiscal_year_period
     *
     * @param string|null $fiscal_year_period Period Year
     *
     * @return self
     */
    public function setFiscalYearPeriod($fiscal_year_period)
    {
        if (is_null($fiscal_year_period)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_year_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_year_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_year_period) && (mb_strlen($fiscal_year_period) > 7)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_year_period when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 7.');
        }

        $this->container['fiscal_year_period'] = $fiscal_year_period;

        return $this;
    }

    /**
     * Gets fiscal_year_variant
     *
     * @return string|null
     */
    public function getFiscalYearVariant()
    {
        return $this->container['fiscal_year_variant'];
    }

    /**
     * Sets fiscal_year_variant
     *
     * @param string|null $fiscal_year_variant fiscal_year_variant
     *
     * @return self
     */
    public function setFiscalYearVariant($fiscal_year_variant)
    {
        if (is_null($fiscal_year_variant)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_year_variant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_year_variant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_year_variant) && (mb_strlen($fiscal_year_variant) > 2)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_year_variant when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['fiscal_year_variant'] = $fiscal_year_variant;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_material
     *
     * @return string|null
     */
    public function getIssgOrRcvgMaterial()
    {
        return $this->container['issg_or_rcvg_material'];
    }

    /**
     * Sets issg_or_rcvg_material
     *
     * @param string|null $issg_or_rcvg_material issg_or_rcvg_material
     *
     * @return self
     */
    public function setIssgOrRcvgMaterial($issg_or_rcvg_material)
    {
        if (is_null($issg_or_rcvg_material)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_material) && (mb_strlen($issg_or_rcvg_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_material when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['issg_or_rcvg_material'] = $issg_or_rcvg_material;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_batch
     *
     * @return string|null
     */
    public function getIssgOrRcvgBatch()
    {
        return $this->container['issg_or_rcvg_batch'];
    }

    /**
     * Sets issg_or_rcvg_batch
     *
     * @param string|null $issg_or_rcvg_batch issg_or_rcvg_batch
     *
     * @return self
     */
    public function setIssgOrRcvgBatch($issg_or_rcvg_batch)
    {
        if (is_null($issg_or_rcvg_batch)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_batch) && (mb_strlen($issg_or_rcvg_batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_batch when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['issg_or_rcvg_batch'] = $issg_or_rcvg_batch;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_plant
     *
     * @return string|null
     */
    public function getIssuingOrReceivingPlant()
    {
        return $this->container['issuing_or_receiving_plant'];
    }

    /**
     * Sets issuing_or_receiving_plant
     *
     * @param string|null $issuing_or_receiving_plant Receiving/Issuing Plant
     *
     * @return self
     */
    public function setIssuingOrReceivingPlant($issuing_or_receiving_plant)
    {
        if (is_null($issuing_or_receiving_plant)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_plant) && (mb_strlen($issuing_or_receiving_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_plant when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['issuing_or_receiving_plant'] = $issuing_or_receiving_plant;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_storage_loc
     *
     * @return string|null
     */
    public function getIssuingOrReceivingStorageLoc()
    {
        return $this->container['issuing_or_receiving_storage_loc'];
    }

    /**
     * Sets issuing_or_receiving_storage_loc
     *
     * @param string|null $issuing_or_receiving_storage_loc Receiving/issuing storage location
     *
     * @return self
     */
    public function setIssuingOrReceivingStorageLoc($issuing_or_receiving_storage_loc)
    {
        if (is_null($issuing_or_receiving_storage_loc)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_storage_loc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_storage_loc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_storage_loc) && (mb_strlen($issuing_or_receiving_storage_loc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_storage_loc when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['issuing_or_receiving_storage_loc'] = $issuing_or_receiving_storage_loc;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_stock_type
     *
     * @return string|null
     */
    public function getIssuingOrReceivingStockType()
    {
        return $this->container['issuing_or_receiving_stock_type'];
    }

    /**
     * Sets issuing_or_receiving_stock_type
     *
     * @param string|null $issuing_or_receiving_stock_type issuing_or_receiving_stock_type
     *
     * @return self
     */
    public function setIssuingOrReceivingStockType($issuing_or_receiving_stock_type)
    {
        if (is_null($issuing_or_receiving_stock_type)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_stock_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_stock_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_stock_type) && (mb_strlen($issuing_or_receiving_stock_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_stock_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['issuing_or_receiving_stock_type'] = $issuing_or_receiving_stock_type;

        return $this;
    }

    /**
     * Gets issg_or_rcvg_spcl_stock_ind
     *
     * @return string|null
     */
    public function getIssgOrRcvgSpclStockInd()
    {
        return $this->container['issg_or_rcvg_spcl_stock_ind'];
    }

    /**
     * Sets issg_or_rcvg_spcl_stock_ind
     *
     * @param string|null $issg_or_rcvg_spcl_stock_ind issg_or_rcvg_spcl_stock_ind
     *
     * @return self
     */
    public function setIssgOrRcvgSpclStockInd($issg_or_rcvg_spcl_stock_ind)
    {
        if (is_null($issg_or_rcvg_spcl_stock_ind)) {
            array_push($this->openAPINullablesSetToNull, 'issg_or_rcvg_spcl_stock_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issg_or_rcvg_spcl_stock_ind', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issg_or_rcvg_spcl_stock_ind) && (mb_strlen($issg_or_rcvg_spcl_stock_ind) > 1)) {
            throw new \InvalidArgumentException('invalid length for $issg_or_rcvg_spcl_stock_ind when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['issg_or_rcvg_spcl_stock_ind'] = $issg_or_rcvg_spcl_stock_ind;

        return $this;
    }

    /**
     * Gets issuing_or_receiving_val_type
     *
     * @return string|null
     */
    public function getIssuingOrReceivingValType()
    {
        return $this->container['issuing_or_receiving_val_type'];
    }

    /**
     * Sets issuing_or_receiving_val_type
     *
     * @param string|null $issuing_or_receiving_val_type Valuation Type of Transfer Batch
     *
     * @return self
     */
    public function setIssuingOrReceivingValType($issuing_or_receiving_val_type)
    {
        if (is_null($issuing_or_receiving_val_type)) {
            array_push($this->openAPINullablesSetToNull, 'issuing_or_receiving_val_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuing_or_receiving_val_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuing_or_receiving_val_type) && (mb_strlen($issuing_or_receiving_val_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $issuing_or_receiving_val_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['issuing_or_receiving_val_type'] = $issuing_or_receiving_val_type;

        return $this;
    }

    /**
     * Gets is_completely_delivered
     *
     * @return bool|null
     */
    public function getIsCompletelyDelivered()
    {
        return $this->container['is_completely_delivered'];
    }

    /**
     * Sets is_completely_delivered
     *
     * @param bool|null $is_completely_delivered \"Delivery Completed\" Indicator
     *
     * @return self
     */
    public function setIsCompletelyDelivered($is_completely_delivered)
    {
        if (is_null($is_completely_delivered)) {
            array_push($this->openAPINullablesSetToNull, 'is_completely_delivered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_completely_delivered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_completely_delivered'] = $is_completely_delivered;

        return $this;
    }

    /**
     * Gets material_document_item_text
     *
     * @return string|null
     */
    public function getMaterialDocumentItemText()
    {
        return $this->container['material_document_item_text'];
    }

    /**
     * Sets material_document_item_text
     *
     * @param string|null $material_document_item_text Item Text
     *
     * @return self
     */
    public function setMaterialDocumentItemText($material_document_item_text)
    {
        if (is_null($material_document_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'material_document_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_document_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_document_item_text) && (mb_strlen($material_document_item_text) > 50)) {
            throw new \InvalidArgumentException('invalid length for $material_document_item_text when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 50.');
        }

        $this->container['material_document_item_text'] = $material_document_item_text;

        return $this;
    }

    /**
     * Gets goods_recipient_name
     *
     * @return string|null
     */
    public function getGoodsRecipientName()
    {
        return $this->container['goods_recipient_name'];
    }

    /**
     * Sets goods_recipient_name
     *
     * @param string|null $goods_recipient_name goods_recipient_name
     *
     * @return self
     */
    public function setGoodsRecipientName($goods_recipient_name)
    {
        if (is_null($goods_recipient_name)) {
            array_push($this->openAPINullablesSetToNull, 'goods_recipient_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_recipient_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($goods_recipient_name) && (mb_strlen($goods_recipient_name) > 12)) {
            throw new \InvalidArgumentException('invalid length for $goods_recipient_name when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['goods_recipient_name'] = $goods_recipient_name;

        return $this;
    }

    /**
     * Gets unloading_point_name
     *
     * @return string|null
     */
    public function getUnloadingPointName()
    {
        return $this->container['unloading_point_name'];
    }

    /**
     * Sets unloading_point_name
     *
     * @param string|null $unloading_point_name unloading_point_name
     *
     * @return self
     */
    public function setUnloadingPointName($unloading_point_name)
    {
        if (is_null($unloading_point_name)) {
            array_push($this->openAPINullablesSetToNull, 'unloading_point_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unloading_point_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($unloading_point_name) && (mb_strlen($unloading_point_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $unloading_point_name when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['unloading_point_name'] = $unloading_point_name;

        return $this;
    }

    /**
     * Gets shelf_life_expiration_date
     *
     * @return string|null
     */
    public function getShelfLifeExpirationDate()
    {
        return $this->container['shelf_life_expiration_date'];
    }

    /**
     * Sets shelf_life_expiration_date
     *
     * @param string|null $shelf_life_expiration_date Shelf Life Expiration or Best-Before Date
     *
     * @return self
     */
    public function setShelfLifeExpirationDate($shelf_life_expiration_date)
    {
        if (is_null($shelf_life_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'shelf_life_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shelf_life_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shelf_life_expiration_date'] = $shelf_life_expiration_date;

        return $this;
    }

    /**
     * Gets manufacture_date
     *
     * @return string|null
     */
    public function getManufactureDate()
    {
        return $this->container['manufacture_date'];
    }

    /**
     * Sets manufacture_date
     *
     * @param string|null $manufacture_date manufacture_date
     *
     * @return self
     */
    public function setManufactureDate($manufacture_date)
    {
        if (is_null($manufacture_date)) {
            array_push($this->openAPINullablesSetToNull, 'manufacture_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacture_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacture_date'] = $manufacture_date;

        return $this;
    }

    /**
     * Gets serial_numbers_are_created_automly
     *
     * @return bool|null
     */
    public function getSerialNumbersAreCreatedAutomly()
    {
        return $this->container['serial_numbers_are_created_automly'];
    }

    /**
     * Sets serial_numbers_are_created_automly
     *
     * @param bool|null $serial_numbers_are_created_automly Create serial number automatically
     *
     * @return self
     */
    public function setSerialNumbersAreCreatedAutomly($serial_numbers_are_created_automly)
    {
        if (is_null($serial_numbers_are_created_automly)) {
            array_push($this->openAPINullablesSetToNull, 'serial_numbers_are_created_automly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial_numbers_are_created_automly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serial_numbers_are_created_automly'] = $serial_numbers_are_created_automly;

        return $this;
    }

    /**
     * Gets reservation
     *
     * @return string|null
     */
    public function getReservation()
    {
        return $this->container['reservation'];
    }

    /**
     * Sets reservation
     *
     * @param string|null $reservation Number of reservation/dependent requirements
     *
     * @return self
     */
    public function setReservation($reservation)
    {
        if (is_null($reservation)) {
            array_push($this->openAPINullablesSetToNull, 'reservation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reservation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reservation) && (mb_strlen($reservation) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reservation when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reservation'] = $reservation;

        return $this;
    }

    /**
     * Gets reservation_item
     *
     * @return string|null
     */
    public function getReservationItem()
    {
        return $this->container['reservation_item'];
    }

    /**
     * Sets reservation_item
     *
     * @param string|null $reservation_item Item Number of Reservation / Dependent Requirements
     *
     * @return self
     */
    public function setReservationItem($reservation_item)
    {
        if (is_null($reservation_item)) {
            array_push($this->openAPINullablesSetToNull, 'reservation_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reservation_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reservation_item) && (mb_strlen($reservation_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reservation_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['reservation_item'] = $reservation_item;

        return $this;
    }

    /**
     * Gets reservation_item_record_type
     *
     * @return string|null
     */
    public function getReservationItemRecordType()
    {
        return $this->container['reservation_item_record_type'];
    }

    /**
     * Sets reservation_item_record_type
     *
     * @param string|null $reservation_item_record_type reservation_item_record_type
     *
     * @return self
     */
    public function setReservationItemRecordType($reservation_item_record_type)
    {
        if (is_null($reservation_item_record_type)) {
            array_push($this->openAPINullablesSetToNull, 'reservation_item_record_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reservation_item_record_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reservation_item_record_type) && (mb_strlen($reservation_item_record_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $reservation_item_record_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['reservation_item_record_type'] = $reservation_item_record_type;

        return $this;
    }

    /**
     * Gets reservation_is_finally_issued
     *
     * @return bool|null
     */
    public function getReservationIsFinallyIssued()
    {
        return $this->container['reservation_is_finally_issued'];
    }

    /**
     * Sets reservation_is_finally_issued
     *
     * @param bool|null $reservation_is_finally_issued Final Issue for Reservation
     *
     * @return self
     */
    public function setReservationIsFinallyIssued($reservation_is_finally_issued)
    {
        if (is_null($reservation_is_finally_issued)) {
            array_push($this->openAPINullablesSetToNull, 'reservation_is_finally_issued');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reservation_is_finally_issued', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reservation_is_finally_issued'] = $reservation_is_finally_issued;

        return $this;
    }

    /**
     * Gets special_stock_idfg_sales_order
     *
     * @return string|null
     */
    public function getSpecialStockIdfgSalesOrder()
    {
        return $this->container['special_stock_idfg_sales_order'];
    }

    /**
     * Sets special_stock_idfg_sales_order
     *
     * @param string|null $special_stock_idfg_sales_order Sales order number of valuated sales order stock
     *
     * @return self
     */
    public function setSpecialStockIdfgSalesOrder($special_stock_idfg_sales_order)
    {
        if (is_null($special_stock_idfg_sales_order)) {
            array_push($this->openAPINullablesSetToNull, 'special_stock_idfg_sales_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_stock_idfg_sales_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($special_stock_idfg_sales_order) && (mb_strlen($special_stock_idfg_sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $special_stock_idfg_sales_order when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['special_stock_idfg_sales_order'] = $special_stock_idfg_sales_order;

        return $this;
    }

    /**
     * Gets special_stock_idfg_sales_order_item
     *
     * @return string|null
     */
    public function getSpecialStockIdfgSalesOrderItem()
    {
        return $this->container['special_stock_idfg_sales_order_item'];
    }

    /**
     * Sets special_stock_idfg_sales_order_item
     *
     * @param string|null $special_stock_idfg_sales_order_item Sales Order Item of Valuated Sales Order Stock
     *
     * @return self
     */
    public function setSpecialStockIdfgSalesOrderItem($special_stock_idfg_sales_order_item)
    {
        if (is_null($special_stock_idfg_sales_order_item)) {
            array_push($this->openAPINullablesSetToNull, 'special_stock_idfg_sales_order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_stock_idfg_sales_order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($special_stock_idfg_sales_order_item) && (mb_strlen($special_stock_idfg_sales_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $special_stock_idfg_sales_order_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['special_stock_idfg_sales_order_item'] = $special_stock_idfg_sales_order_item;

        return $this;
    }

    /**
     * Gets special_stock_idfg_wbs_element
     *
     * @return string|null
     */
    public function getSpecialStockIdfgWbsElement()
    {
        return $this->container['special_stock_idfg_wbs_element'];
    }

    /**
     * Sets special_stock_idfg_wbs_element
     *
     * @param string|null $special_stock_idfg_wbs_element Work Breakdown Structure Element (WBS Element)
     *
     * @return self
     */
    public function setSpecialStockIdfgWbsElement($special_stock_idfg_wbs_element)
    {
        if (is_null($special_stock_idfg_wbs_element)) {
            array_push($this->openAPINullablesSetToNull, 'special_stock_idfg_wbs_element');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_stock_idfg_wbs_element', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($special_stock_idfg_wbs_element) && (mb_strlen($special_stock_idfg_wbs_element) > 24)) {
            throw new \InvalidArgumentException('invalid length for $special_stock_idfg_wbs_element when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 24.');
        }

        $this->container['special_stock_idfg_wbs_element'] = $special_stock_idfg_wbs_element;

        return $this;
    }

    /**
     * Gets is_automatically_created
     *
     * @return string|null
     */
    public function getIsAutomaticallyCreated()
    {
        return $this->container['is_automatically_created'];
    }

    /**
     * Sets is_automatically_created
     *
     * @param string|null $is_automatically_created Item Automatically Created Indicator
     *
     * @return self
     */
    public function setIsAutomaticallyCreated($is_automatically_created)
    {
        if (is_null($is_automatically_created)) {
            array_push($this->openAPINullablesSetToNull, 'is_automatically_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_automatically_created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_automatically_created) && (mb_strlen($is_automatically_created) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_automatically_created when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['is_automatically_created'] = $is_automatically_created;

        return $this;
    }

    /**
     * Gets material_document_line
     *
     * @return string|null
     */
    public function getMaterialDocumentLine()
    {
        return $this->container['material_document_line'];
    }

    /**
     * Sets material_document_line
     *
     * @param string|null $material_document_line Unique Identification of Document Line
     *
     * @return self
     */
    public function setMaterialDocumentLine($material_document_line)
    {
        if (is_null($material_document_line)) {
            array_push($this->openAPINullablesSetToNull, 'material_document_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_document_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_document_line) && (mb_strlen($material_document_line) > 6)) {
            throw new \InvalidArgumentException('invalid length for $material_document_line when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['material_document_line'] = $material_document_line;

        return $this;
    }

    /**
     * Gets material_document_parent_line
     *
     * @return string|null
     */
    public function getMaterialDocumentParentLine()
    {
        return $this->container['material_document_parent_line'];
    }

    /**
     * Sets material_document_parent_line
     *
     * @param string|null $material_document_parent_line Identifier of immediately superior line
     *
     * @return self
     */
    public function setMaterialDocumentParentLine($material_document_parent_line)
    {
        if (is_null($material_document_parent_line)) {
            array_push($this->openAPINullablesSetToNull, 'material_document_parent_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_document_parent_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_document_parent_line) && (mb_strlen($material_document_parent_line) > 6)) {
            throw new \InvalidArgumentException('invalid length for $material_document_parent_line when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['material_document_parent_line'] = $material_document_parent_line;

        return $this;
    }

    /**
     * Gets hierarchy_node_level
     *
     * @return string|null
     */
    public function getHierarchyNodeLevel()
    {
        return $this->container['hierarchy_node_level'];
    }

    /**
     * Sets hierarchy_node_level
     *
     * @param string|null $hierarchy_node_level Hierarchy level of line in document
     *
     * @return self
     */
    public function setHierarchyNodeLevel($hierarchy_node_level)
    {
        if (is_null($hierarchy_node_level)) {
            array_push($this->openAPINullablesSetToNull, 'hierarchy_node_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hierarchy_node_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hierarchy_node_level) && (mb_strlen($hierarchy_node_level) > 2)) {
            throw new \InvalidArgumentException('invalid length for $hierarchy_node_level when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['hierarchy_node_level'] = $hierarchy_node_level;

        return $this;
    }

    /**
     * Gets goods_movement_is_cancelled
     *
     * @return bool|null
     */
    public function getGoodsMovementIsCancelled()
    {
        return $this->container['goods_movement_is_cancelled'];
    }

    /**
     * Sets goods_movement_is_cancelled
     *
     * @param bool|null $goods_movement_is_cancelled Item has been Cancelled
     *
     * @return self
     */
    public function setGoodsMovementIsCancelled($goods_movement_is_cancelled)
    {
        if (is_null($goods_movement_is_cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'goods_movement_is_cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_movement_is_cancelled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['goods_movement_is_cancelled'] = $goods_movement_is_cancelled;

        return $this;
    }

    /**
     * Gets reversed_material_document_year
     *
     * @return string|null
     */
    public function getReversedMaterialDocumentYear()
    {
        return $this->container['reversed_material_document_year'];
    }

    /**
     * Sets reversed_material_document_year
     *
     * @param string|null $reversed_material_document_year Reversed Material Document Year
     *
     * @return self
     */
    public function setReversedMaterialDocumentYear($reversed_material_document_year)
    {
        if (is_null($reversed_material_document_year)) {
            array_push($this->openAPINullablesSetToNull, 'reversed_material_document_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reversed_material_document_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reversed_material_document_year) && (mb_strlen($reversed_material_document_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reversed_material_document_year when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['reversed_material_document_year'] = $reversed_material_document_year;

        return $this;
    }

    /**
     * Gets reversed_material_document
     *
     * @return string|null
     */
    public function getReversedMaterialDocument()
    {
        return $this->container['reversed_material_document'];
    }

    /**
     * Sets reversed_material_document
     *
     * @param string|null $reversed_material_document Reversed Material Document
     *
     * @return self
     */
    public function setReversedMaterialDocument($reversed_material_document)
    {
        if (is_null($reversed_material_document)) {
            array_push($this->openAPINullablesSetToNull, 'reversed_material_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reversed_material_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reversed_material_document) && (mb_strlen($reversed_material_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reversed_material_document when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reversed_material_document'] = $reversed_material_document;

        return $this;
    }

    /**
     * Gets reversed_material_document_item
     *
     * @return string|null
     */
    public function getReversedMaterialDocumentItem()
    {
        return $this->container['reversed_material_document_item'];
    }

    /**
     * Sets reversed_material_document_item
     *
     * @param string|null $reversed_material_document_item Reversed Material Document Item
     *
     * @return self
     */
    public function setReversedMaterialDocumentItem($reversed_material_document_item)
    {
        if (is_null($reversed_material_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reversed_material_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reversed_material_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reversed_material_document_item) && (mb_strlen($reversed_material_document_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reversed_material_document_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['reversed_material_document_item'] = $reversed_material_document_item;

        return $this;
    }

    /**
     * Gets reference_document_fiscal_year
     *
     * @return string|null
     */
    public function getReferenceDocumentFiscalYear()
    {
        return $this->container['reference_document_fiscal_year'];
    }

    /**
     * Sets reference_document_fiscal_year
     *
     * @param string|null $reference_document_fiscal_year Fiscal Year of a Reference Document
     *
     * @return self
     */
    public function setReferenceDocumentFiscalYear($reference_document_fiscal_year)
    {
        if (is_null($reference_document_fiscal_year)) {
            array_push($this->openAPINullablesSetToNull, 'reference_document_fiscal_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_document_fiscal_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_document_fiscal_year) && (mb_strlen($reference_document_fiscal_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_document_fiscal_year when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['reference_document_fiscal_year'] = $reference_document_fiscal_year;

        return $this;
    }

    /**
     * Gets invtry_mgmt_ref_document_item
     *
     * @return string|null
     */
    public function getInvtryMgmtRefDocumentItem()
    {
        return $this->container['invtry_mgmt_ref_document_item'];
    }

    /**
     * Sets invtry_mgmt_ref_document_item
     *
     * @param string|null $invtry_mgmt_ref_document_item Item of a Reference Document
     *
     * @return self
     */
    public function setInvtryMgmtRefDocumentItem($invtry_mgmt_ref_document_item)
    {
        if (is_null($invtry_mgmt_ref_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'invtry_mgmt_ref_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invtry_mgmt_ref_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invtry_mgmt_ref_document_item) && (mb_strlen($invtry_mgmt_ref_document_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $invtry_mgmt_ref_document_item when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['invtry_mgmt_ref_document_item'] = $invtry_mgmt_ref_document_item;

        return $this;
    }

    /**
     * Gets invtry_mgmt_reference_document
     *
     * @return string|null
     */
    public function getInvtryMgmtReferenceDocument()
    {
        return $this->container['invtry_mgmt_reference_document'];
    }

    /**
     * Sets invtry_mgmt_reference_document
     *
     * @param string|null $invtry_mgmt_reference_document Document No. of a Reference Document
     *
     * @return self
     */
    public function setInvtryMgmtReferenceDocument($invtry_mgmt_reference_document)
    {
        if (is_null($invtry_mgmt_reference_document)) {
            array_push($this->openAPINullablesSetToNull, 'invtry_mgmt_reference_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invtry_mgmt_reference_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invtry_mgmt_reference_document) && (mb_strlen($invtry_mgmt_reference_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invtry_mgmt_reference_document when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['invtry_mgmt_reference_document'] = $invtry_mgmt_reference_document;

        return $this;
    }

    /**
     * Gets material_document_posting_type
     *
     * @return string|null
     */
    public function getMaterialDocumentPostingType()
    {
        return $this->container['material_document_posting_type'];
    }

    /**
     * Sets material_document_posting_type
     *
     * @param string|null $material_document_posting_type Reversal, return delivery, or transfer posting
     *
     * @return self
     */
    public function setMaterialDocumentPostingType($material_document_posting_type)
    {
        if (is_null($material_document_posting_type)) {
            array_push($this->openAPINullablesSetToNull, 'material_document_posting_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_document_posting_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_document_posting_type) && (mb_strlen($material_document_posting_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $material_document_posting_type when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['material_document_posting_type'] = $material_document_posting_type;

        return $this;
    }

    /**
     * Gets inventory_usability_code
     *
     * @return string|null
     */
    public function getInventoryUsabilityCode()
    {
        return $this->container['inventory_usability_code'];
    }

    /**
     * Sets inventory_usability_code
     *
     * @param string|null $inventory_usability_code inventory_usability_code
     *
     * @return self
     */
    public function setInventoryUsabilityCode($inventory_usability_code)
    {
        if (is_null($inventory_usability_code)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_usability_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_usability_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inventory_usability_code) && (mb_strlen($inventory_usability_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_usability_code when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['inventory_usability_code'] = $inventory_usability_code;

        return $this;
    }

    /**
     * Gets ewm_warehouse
     *
     * @return string|null
     */
    public function getEwmWarehouse()
    {
        return $this->container['ewm_warehouse'];
    }

    /**
     * Sets ewm_warehouse
     *
     * @param string|null $ewm_warehouse Warehouse Number/Warehouse Complex
     *
     * @return self
     */
    public function setEwmWarehouse($ewm_warehouse)
    {
        if (is_null($ewm_warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'ewm_warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ewm_warehouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ewm_warehouse) && (mb_strlen($ewm_warehouse) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ewm_warehouse when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['ewm_warehouse'] = $ewm_warehouse;

        return $this;
    }

    /**
     * Gets ewm_storage_bin
     *
     * @return string|null
     */
    public function getEwmStorageBin()
    {
        return $this->container['ewm_storage_bin'];
    }

    /**
     * Sets ewm_storage_bin
     *
     * @param string|null $ewm_storage_bin ewm_storage_bin
     *
     * @return self
     */
    public function setEwmStorageBin($ewm_storage_bin)
    {
        if (is_null($ewm_storage_bin)) {
            array_push($this->openAPINullablesSetToNull, 'ewm_storage_bin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ewm_storage_bin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ewm_storage_bin) && (mb_strlen($ewm_storage_bin) > 18)) {
            throw new \InvalidArgumentException('invalid length for $ewm_storage_bin when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['ewm_storage_bin'] = $ewm_storage_bin;

        return $this;
    }

    /**
     * Gets debit_credit_code
     *
     * @return string|null
     */
    public function getDebitCreditCode()
    {
        return $this->container['debit_credit_code'];
    }

    /**
     * Sets debit_credit_code
     *
     * @param string|null $debit_credit_code Debit/Credit Indicator
     *
     * @return self
     */
    public function setDebitCreditCode($debit_credit_code)
    {
        if (is_null($debit_credit_code)) {
            array_push($this->openAPINullablesSetToNull, 'debit_credit_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debit_credit_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($debit_credit_code) && (mb_strlen($debit_credit_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $debit_credit_code when calling APIMATERIALDOCUMENTSRVAMaterialDocumentItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['debit_credit_code'] = $debit_credit_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


