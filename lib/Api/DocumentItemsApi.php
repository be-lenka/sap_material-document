<?php
/**
 * DocumentItemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Material Documents - Read, Create
 *
 * This service enables you to retrieve and create material documents, for example, to post a goods receipt for a purchase order or to document the transfer of materials between two storage locations. Additionally, the service allows you to cancel existing material documents or single items. It can be consumed by external systems and user interfaces.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\MaterialDocument\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\MaterialDocument\ApiException;
use BeLenka\SAP\MaterialDocument\Configuration;
use BeLenka\SAP\MaterialDocument\HeaderSelector;
use BeLenka\SAP\MaterialDocument\ObjectSerializer;

/**
 * DocumentItemsApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\MaterialDocument
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet' => [
            'application/json',
        ],
        'aMaterialDocumentItemGet' => [
            'application/json',
        ],
        'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet' => [
            'application/json',
        ],
        'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet' => [
            'application/json',
        ],
        'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet' => [
            'application/json',
        ],
        'cancelItemPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet
     *
     * Reads information for a specific material document header and material document items
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\Wrapper1|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet($material_document_year, $material_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'][0])
    {
        list($response) = $this->aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetWithHttpInfo($material_document_year, $material_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetWithHttpInfo
     *
     * Reads information for a specific material document header and material document items
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\Wrapper1|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetWithHttpInfo($material_document_year, $material_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'][0])
    {
        $request = $this->aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetRequest($material_document_year, $material_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetAsync
     *
     * Reads information for a specific material document header and material document items
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetAsync($material_document_year, $material_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'][0])
    {
        return $this->aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetAsyncWithHttpInfo($material_document_year, $material_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetAsyncWithHttpInfo
     *
     * Reads information for a specific material document header and material document items
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetAsyncWithHttpInfo($material_document_year, $material_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper1';
        $request = $this->aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetRequest($material_document_year, $material_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGetRequest($material_document_year, $material_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'][0])
    {

        // verify the required parameter 'material_document_year' is set
        if ($material_document_year === null || (is_array($material_document_year) && count($material_document_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_year when calling aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'
            );
        }
        if (strlen($material_document_year) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_year" when calling DocumentItemsApi.aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'material_document' is set
        if ($material_document === null || (is_array($material_document) && count($material_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document when calling aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet'
            );
        }
        if (strlen($material_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$material_document" when calling DocumentItemsApi.aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling DocumentItemsApi.aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling DocumentItemsApi.aMaterialDocumentHeaderMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentToMaterialDocumentItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_MaterialDocumentHeader(MaterialDocumentYear=\'{MaterialDocumentYear}\',MaterialDocument=\'{MaterialDocument}\')/to_MaterialDocumentItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($material_document_year !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentYear' . '}',
                ObjectSerializer::toPathValue($material_document_year),
                $resourcePath
            );
        }
        // path params
        if ($material_document !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocument' . '}',
                ObjectSerializer::toPathValue($material_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aMaterialDocumentItemGet
     *
     * Reads information on material document items level
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\Wrapper1|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function aMaterialDocumentItemGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemGet'][0])
    {
        list($response) = $this->aMaterialDocumentItemGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aMaterialDocumentItemGetWithHttpInfo
     *
     * Reads information on material document items level
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\Wrapper1|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aMaterialDocumentItemGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemGet'][0])
    {
        $request = $this->aMaterialDocumentItemGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aMaterialDocumentItemGetAsync
     *
     * Reads information on material document items level
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemGet'][0])
    {
        return $this->aMaterialDocumentItemGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aMaterialDocumentItemGetAsyncWithHttpInfo
     *
     * Reads information on material document items level
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper1';
        $request = $this->aMaterialDocumentItemGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aMaterialDocumentItemGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aMaterialDocumentItemGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling DocumentItemsApi.aMaterialDocumentItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling DocumentItemsApi.aMaterialDocumentItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_MaterialDocumentItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet
     *
     * Reads information on material document items level for a specific material document
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'][0])
    {
        list($response) = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetWithHttpInfo
     *
     * Reads information on material document items level for a specific material document
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'][0])
    {
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetRequest($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetAsync
     *
     * Reads information on material document items level for a specific material document
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetAsync($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'][0])
    {
        return $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetAsyncWithHttpInfo
     *
     * Reads information on material document items level for a specific material document
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType';
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetRequest($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGetRequest($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'][0])
    {

        // verify the required parameter 'material_document_year' is set
        if ($material_document_year === null || (is_array($material_document_year) && count($material_document_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_year when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'
            );
        }
        if (strlen($material_document_year) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_year" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'material_document' is set
        if ($material_document === null || (is_array($material_document) && count($material_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'
            );
        }
        if (strlen($material_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$material_document" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'material_document_item' is set
        if ($material_document_item === null || (is_array($material_document_item) && count($material_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_item when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet'
            );
        }
        if (strlen($material_document_item) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_item" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/A_MaterialDocumentItem(MaterialDocumentYear=\'{MaterialDocumentYear}\',MaterialDocument=\'{MaterialDocument}\',MaterialDocumentItem=\'{MaterialDocumentItem}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($material_document_year !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentYear' . '}',
                ObjectSerializer::toPathValue($material_document_year),
                $resourcePath
            );
        }
        // path params
        if ($material_document !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocument' . '}',
                ObjectSerializer::toPathValue($material_document),
                $resourcePath
            );
        }
        // path params
        if ($material_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentItem' . '}',
                ObjectSerializer::toPathValue($material_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet
     *
     * Reads information on material document item and header level for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'][0])
    {
        list($response) = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetWithHttpInfo
     *
     * Reads information on material document item and header level for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'][0])
    {
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetRequest($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetAsync
     *
     * Reads information on material document item and header level for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetAsync($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'][0])
    {
        return $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetAsyncWithHttpInfo
     *
     * Reads information on material document item and header level for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentHeaderType';
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetRequest($material_document_year, $material_document, $material_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGetRequest($material_document_year, $material_document, $material_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'][0])
    {

        // verify the required parameter 'material_document_year' is set
        if ($material_document_year === null || (is_array($material_document_year) && count($material_document_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_year when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'
            );
        }
        if (strlen($material_document_year) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_year" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'material_document' is set
        if ($material_document === null || (is_array($material_document) && count($material_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'
            );
        }
        if (strlen($material_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$material_document" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'material_document_item' is set
        if ($material_document_item === null || (is_array($material_document_item) && count($material_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_item when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet'
            );
        }
        if (strlen($material_document_item) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_item" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToMaterialDocumentHeaderGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/A_MaterialDocumentItem(MaterialDocumentYear=\'{MaterialDocumentYear}\',MaterialDocument=\'{MaterialDocument}\',MaterialDocumentItem=\'{MaterialDocumentItem}\')/to_MaterialDocumentHeader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($material_document_year !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentYear' . '}',
                ObjectSerializer::toPathValue($material_document_year),
                $resourcePath
            );
        }
        // path params
        if ($material_document !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocument' . '}',
                ObjectSerializer::toPathValue($material_document),
                $resourcePath
            );
        }
        // path params
        if ($material_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentItem' . '}',
                ObjectSerializer::toPathValue($material_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet
     *
     * Reads information on serial numbers for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\Wrapper2|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet($material_document_year, $material_document, $material_document_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'][0])
    {
        list($response) = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetWithHttpInfo
     *
     * Reads information on serial numbers for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\Wrapper2|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetWithHttpInfo($material_document_year, $material_document, $material_document_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'][0])
    {
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetRequest($material_document_year, $material_document, $material_document_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetAsync
     *
     * Reads information on serial numbers for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetAsync($material_document_year, $material_document, $material_document_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'][0])
    {
        return $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetAsyncWithHttpInfo
     *
     * Reads information on serial numbers for a specific material document item
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\Wrapper2';
        $request = $this->aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetRequest($material_document_year, $material_document, $material_document_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'
     *
     * @param  string $material_document_year Material Document Year (required)
     * @param  string $material_document Number of Material Document (required)
     * @param  string $material_document_item Material Document Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGetRequest($material_document_year, $material_document, $material_document_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'][0])
    {

        // verify the required parameter 'material_document_year' is set
        if ($material_document_year === null || (is_array($material_document_year) && count($material_document_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_year when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'
            );
        }
        if (strlen($material_document_year) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_year" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'material_document' is set
        if ($material_document === null || (is_array($material_document) && count($material_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'
            );
        }
        if (strlen($material_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$material_document" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'material_document_item' is set
        if ($material_document_item === null || (is_array($material_document_item) && count($material_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_item when calling aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet'
            );
        }
        if (strlen($material_document_item) > 4) {
            throw new \InvalidArgumentException('invalid length for "$material_document_item" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet, must be smaller than or equal to 4.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling DocumentItemsApi.aMaterialDocumentItemMaterialDocumentYearMaterialDocumentYearMaterialDocumentMaterialDocumentMaterialDocumentItemMaterialDocumentItemToSerialNumbersGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_MaterialDocumentItem(MaterialDocumentYear=\'{MaterialDocumentYear}\',MaterialDocument=\'{MaterialDocument}\',MaterialDocumentItem=\'{MaterialDocumentItem}\')/to_SerialNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($material_document_year !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentYear' . '}',
                ObjectSerializer::toPathValue($material_document_year),
                $resourcePath
            );
        }
        // path params
        if ($material_document !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocument' . '}',
                ObjectSerializer::toPathValue($material_document),
                $resourcePath
            );
        }
        // path params
        if ($material_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'MaterialDocumentItem' . '}',
                ObjectSerializer::toPathValue($material_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelItemPost
     *
     * Cancels a material document item
     *
     * @param  string $material_document_year Material Doc. Year   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document Material Document   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document_item Material Doc.Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $posting_date Posting Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType|\BeLenka\SAP\MaterialDocument\Model\Error
     */
    public function cancelItemPost($material_document_year, $material_document, $material_document_item, $posting_date = null, string $contentType = self::contentTypes['cancelItemPost'][0])
    {
        list($response) = $this->cancelItemPostWithHttpInfo($material_document_year, $material_document, $material_document_item, $posting_date, $contentType);
        return $response;
    }

    /**
     * Operation cancelItemPostWithHttpInfo
     *
     * Cancels a material document item
     *
     * @param  string $material_document_year Material Doc. Year   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document Material Document   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document_item Material Doc.Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $posting_date Posting Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\MaterialDocument\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType|\BeLenka\SAP\MaterialDocument\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelItemPostWithHttpInfo($material_document_year, $material_document, $material_document_item, $posting_date = null, string $contentType = self::contentTypes['cancelItemPost'][0])
    {
        $request = $this->cancelItemPostRequest($material_document_year, $material_document, $material_document_item, $posting_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation cancelItemPostAsync
     *
     * Cancels a material document item
     *
     * @param  string $material_document_year Material Doc. Year   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document Material Document   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document_item Material Doc.Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $posting_date Posting Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelItemPostAsync($material_document_year, $material_document, $material_document_item, $posting_date = null, string $contentType = self::contentTypes['cancelItemPost'][0])
    {
        return $this->cancelItemPostAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $posting_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelItemPostAsyncWithHttpInfo
     *
     * Cancels a material document item
     *
     * @param  string $material_document_year Material Doc. Year   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document Material Document   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document_item Material Doc.Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $posting_date Posting Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelItemPostAsyncWithHttpInfo($material_document_year, $material_document, $material_document_item, $posting_date = null, string $contentType = self::contentTypes['cancelItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\MaterialDocument\Model\AMaterialDocumentItemType';
        $request = $this->cancelItemPostRequest($material_document_year, $material_document, $material_document_item, $posting_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelItemPost'
     *
     * @param  string $material_document_year Material Doc. Year   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document Material Document   (Value needs to be enclosed in single quotes) (required)
     * @param  string $material_document_item Material Doc.Item   (Value needs to be enclosed in single quotes) (required)
     * @param  string $posting_date Posting Date   (Value needs to be enclosed in single quotes and prefixed with &#x60;datetime&#x60;, e.g. &#x60;datetime&#39;2017-12-31T00:00&#39;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelItemPostRequest($material_document_year, $material_document, $material_document_item, $posting_date = null, string $contentType = self::contentTypes['cancelItemPost'][0])
    {

        // verify the required parameter 'material_document_year' is set
        if ($material_document_year === null || (is_array($material_document_year) && count($material_document_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_year when calling cancelItemPost'
            );
        }
        if (strlen($material_document_year) > 6) {
            throw new \InvalidArgumentException('invalid length for "$material_document_year" when calling DocumentItemsApi.cancelItemPost, must be smaller than or equal to 6.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $material_document_year)) {
            throw new \InvalidArgumentException("invalid value for \"material_document_year\" when calling DocumentItemsApi.cancelItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'material_document' is set
        if ($material_document === null || (is_array($material_document) && count($material_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document when calling cancelItemPost'
            );
        }
        if (strlen($material_document) > 12) {
            throw new \InvalidArgumentException('invalid length for "$material_document" when calling DocumentItemsApi.cancelItemPost, must be smaller than or equal to 12.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $material_document)) {
            throw new \InvalidArgumentException("invalid value for \"material_document\" when calling DocumentItemsApi.cancelItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        // verify the required parameter 'material_document_item' is set
        if ($material_document_item === null || (is_array($material_document_item) && count($material_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $material_document_item when calling cancelItemPost'
            );
        }
        if (strlen($material_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$material_document_item" when calling DocumentItemsApi.cancelItemPost, must be smaller than or equal to 6.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $material_document_item)) {
            throw new \InvalidArgumentException("invalid value for \"material_document_item\" when calling DocumentItemsApi.cancelItemPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        
        if ($posting_date !== null && !preg_match("/^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/", $posting_date)) {
            throw new \InvalidArgumentException("invalid value for \"posting_date\" when calling DocumentItemsApi.cancelItemPost, must conform to the pattern /^datetime'[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00'$/.");
        }
        

        $resourcePath = '/CancelItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $material_document_year,
            'MaterialDocumentYear', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $material_document,
            'MaterialDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $material_document_item,
            'MaterialDocumentItem', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $posting_date,
            'PostingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
